'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var inflight = require('./inflight.js');
var utilities = require('./utilities.js');
var types = require('./types.js');

const WATCH_RESOURCE_TYPES = ['script', 'css'];
const DEFAULT_TIMEOUT = 60000;
class Performance {
  constructor() {
    this.supportsObserver = utilities.hasGlobal('PerformanceObserver');
    this.supportsMarks = utilities.hasGlobal('PerformanceMark');
    this.supportsNavigationEntries = utilities.hasGlobal('PerformanceNavigationTiming');
    this.supportsTimingEntries = utilities.hasGlobal('PerformanceTiming');
    this.supportsLongtaskEntries = utilities.hasGlobal('PerformanceLongTaskTiming');
    this.supportsResourceEntries = utilities.hasGlobal('PerformanceResourceTiming');
    this.supportsPaintEntries = utilities.hasGlobal('PerformancePaintTiming');
    this.timeOrigin = utilities.referenceTime();
    this.supportsDetailedTime = utilities.supportsPerformanceObserver;
    this.supportsDetailedEvents = this.supportsNavigationEntries && this.supportsLongtaskEntries && this.supportsResourceEntries && this.supportsPaintEntries;
    this.inflightNavigation = void 0;
    this.navigationTimeout = void 0;
    this.firstNavigation = void 0;
    this.lifecycleEvents = [];
    this.navigationCount = 0;
    this.eventHandlers = {
      navigation: new Set(),
      inflightNavigation: new Set(),
      lifecycleEvent: new Set()
    };
    this.start({
      timeStamp: 0
    });
    utilities.withNavigation(this.start.bind(this));

    if (this.supportsTimingEntries && (!this.supportsDetailedTime || !this.supportsNavigationEntries)) {
      utilities.withTiming(({
        responseStart,
        domContentLoadedEventStart,
        loadEventStart
      }) => {
        // window.performance.timing uses full timestamps, while
        // the ones coming from observing navigation entries are
        // time from performance.timeOrigin. We just normalize these
        // ones to be relative to "start" since things listening for
        // events expect them to be relative to when the navigation
        // began.
        this.lifecycleEvent({
          type: types.EventType.TimeToFirstByte,
          start: responseStart - this.timeOrigin,
          duration: 0
        });
        this.lifecycleEvent({
          type: types.EventType.DomContentLoaded,
          start: domContentLoadedEventStart - this.timeOrigin,
          duration: 0
        });
        this.lifecycleEvent({
          type: types.EventType.Load,
          start: loadEventStart - this.timeOrigin,
          duration: 0
        });
      });
    } else {
      utilities.withEntriesOfType('navigation', entry => {
        this.lifecycleEvent({
          type: types.EventType.TimeToFirstByte,
          start: entry.responseStart,
          duration: 0
        });

        if (entry.domContentLoadedEventStart > 0) {
          this.lifecycleEvent({
            type: types.EventType.DomContentLoaded,
            start: entry.domContentLoadedEventStart,
            duration: 0
          });
        }

        if (entry.loadEventStart > 0) {
          this.lifecycleEvent({
            type: types.EventType.Load,
            start: entry.loadEventStart,
            duration: 0
          });
        }
      });
    }

    if (this.supportsResourceEntries) {
      utilities.withEntriesOfType('resource', entry => {
        if (!WATCH_RESOURCE_TYPES.includes(entry.initiatorType)) {
          return;
        }

        this.event({
          type: entry.initiatorType === 'script' ? types.EventType.ScriptDownload : types.EventType.StyleDownload,
          start: entry.startTime,
          duration: entry.duration,
          metadata: {
            name: entry.name,
            size: entry.encodedBodySize
          }
        }, {
          replace: true
        });
      });
    }

    if (this.supportsLongtaskEntries) {
      utilities.withEntriesOfType('longtask', entry => {
        this.event({
          type: types.EventType.LongTask,
          start: entry.startTime,
          duration: entry.duration
        });
      });
    }

    if (this.supportsPaintEntries) {
      utilities.withEntriesOfType('paint', entry => {
        const type = entry.name === 'first-paint' ? types.EventType.TimeToFirstPaint : types.EventType.TimeToFirstContentfulPaint;
        this.lifecycleEvent({
          type,
          start: entry.startTime,
          duration: 0
        });
      });
    }

    if (typeof window !== undefined && window.perfMetrics !== undefined) {
      window.perfMetrics.onFirstInputDelay(delay => {
        this.lifecycleEvent({
          type: types.EventType.FirstInputDelay,
          start: utilities.now() - delay,
          duration: delay
        });
      });
    }
  }

  mark(stage, id) {
    if (this.supportsMarks) {
      window.performance.mark(`${id}::${stage}`);
    }
  }

  on(event, handler) {
    const handlers = this.eventHandlers[event];
    handlers.add(handler); // If they are registering to hear about completed navigations, and we have already
    // completed the first load, tell them about it. This allows them to bind to the
    // listener later and still feel as if they had registered as early as possible.

    if (event === 'navigation' && this.firstNavigation != null && this.navigationCount === 1) {
      handler(this.firstNavigation);
    } // If they are registered to hear about new navigations, and one is in flight,
    // tell them right away.


    if (event === 'inflightNavigation' && this.inflightNavigation != null) {
      handler();
    }

    if (event === 'lifecycleEvent') {
      for (const event of this.lifecycleEvents) {
        handler(event);
      }
    }

    return () => handlers.delete(handler);
  }

  event(event, {
    replace = false
  } = {}) {
    if (this.inflightNavigation == null) {
      return;
    }

    this.inflightNavigation.event(event, replace);
  }

  start({
    timeStamp = utilities.now(),
    target = window.location.pathname,
    timeout = DEFAULT_TIMEOUT
  } = {}) {
    this.clearTimeout();

    if (this.inflightNavigation) {
      this.record(this.inflightNavigation.cancel(timeStamp));
    }

    this.inflightNavigation = new inflight.InflightNavigation({
      timeOrigin: this.timeOrigin,
      start: timeStamp,
      target
    }, {
      index: this.navigationCount,
      supportsDetailedTime: this.supportsDetailedTime,
      supportsDetailedEvents: this.supportsDetailedEvents
    });
    this.navigationTimeout = setTimeout(() => this.timeout.bind(this), timeout);

    for (const subscriber of this.eventHandlers.inflightNavigation) {
      subscriber();
    }
  }

  usable(timeStamp = utilities.now()) {
    this.event({
      type: types.EventType.Usable,
      start: timeStamp,
      duration: 0
    }, {
      replace: true
    });
  }

  finish(timeStamp = utilities.now()) {
    this.clearTimeout();

    if (this.inflightNavigation == null) {
      return;
    }

    const navigation = this.inflightNavigation.finish(timeStamp);
    this.firstNavigation = this.firstNavigation || navigation;
    this.record(navigation);
    this.inflightNavigation = undefined;
  }

  lifecycleEvent(event) {
    if (this.lifecycleEvents.find(({
      type
    }) => type === event.type) != null) {
      return;
    }

    this.event(event);
    this.lifecycleEvents.push(event);

    for (const handler of this.eventHandlers.lifecycleEvent) {
      handler(event);
    }
  }

  timeout() {
    this.clearTimeout();

    if (this.inflightNavigation == null) {
      return;
    }

    this.record(this.inflightNavigation.timeout());
  }

  clearTimeout() {
    if (this.navigationTimeout) {
      clearTimeout(this.navigationTimeout);
      this.navigationTimeout = undefined;
    }
  }

  record(navigation) {
    this.navigationCount += 1;

    for (const subscriber of this.eventHandlers.navigation) {
      subscriber(navigation);
    }
  }

}

exports.Performance = Performance;
