import { Navigation } from './navigation';
import { Event, LifecycleEvent } from './types';
interface EventMap {
    navigation: (navigation: Navigation) => void;
    inflightNavigation: () => void;
    lifecycleEvent: (event: LifecycleEvent) => void;
}
export declare class Performance {
    readonly supportsObserver: boolean;
    readonly supportsMarks: boolean;
    readonly supportsNavigationEntries: boolean;
    readonly supportsTimingEntries: boolean;
    readonly supportsLongtaskEntries: boolean;
    readonly supportsResourceEntries: boolean;
    readonly supportsPaintEntries: boolean;
    readonly timeOrigin: number;
    readonly supportsDetailedTime: boolean;
    readonly supportsDetailedEvents: boolean;
    private inflightNavigation?;
    private navigationTimeout?;
    private firstNavigation?;
    private lifecycleEvents;
    private navigationCount;
    private eventHandlers;
    constructor();
    mark(stage: string, id: string): void;
    on<T extends keyof EventMap>(event: T, handler: EventMap[T]): () => boolean;
    event(event: Event, { replace }?: {
        replace?: boolean | undefined;
    }): void;
    start({ timeStamp, target, timeout, }?: {
        timeStamp?: number | undefined;
        target?: string | undefined;
        timeout?: number | undefined;
    }): void;
    usable(timeStamp?: number): void;
    finish(timeStamp?: number): void;
    private lifecycleEvent;
    private timeout;
    private clearTimeout;
    private record;
}
export {};
//# sourceMappingURL=performance.d.ts.map