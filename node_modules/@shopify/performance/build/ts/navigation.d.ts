import { Event, NavigationDefinition, NavigationResult, NavigationMetadata, ScriptDownloadEvent, StyleDownloadEvent, EventMap } from './types';
export declare class Navigation implements NavigationDefinition {
    metadata: NavigationMetadata;
    start: number;
    duration: number;
    target: string;
    events: Event[];
    result: NavigationResult;
    get isFullPageNavigation(): boolean;
    constructor({ start, duration, target, events, result }: NavigationDefinition, metadata: NavigationMetadata);
    eventsByType<T extends Event['type'], EventType = EventMap[T]>(targetType: T): EventType[];
    totalDurationByEventType(type: Event['type'], { countOverlaps }?: {
        countOverlaps?: boolean | undefined;
    }): number;
    get timeToComplete(): number;
    get timeToUsable(): number;
    get resourceEvents(): (ScriptDownloadEvent | StyleDownloadEvent)[];
    get totalDownloadSize(): number | undefined;
    get cacheEffectiveness(): number | undefined;
    toJSON({ removeEventMetadata, removeLifecycleEvents, }?: {
        removeEventMetadata?: boolean | undefined;
        removeLifecycleEvents?: boolean | undefined;
    }): NavigationDefinition;
}
//# sourceMappingURL=navigation.d.ts.map