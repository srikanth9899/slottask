'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var network = require('@shopify/network');
var navigationListener = require('./navigation-listener.js');
var lifecycleEventListener = require('./lifecycle-event-listener.js');

function usePerformanceReport(url, {
  locale = undefined,
  onError = noop
} = {}) {
  const navigations = React.useRef([]);
  const events = React.useRef([]);
  const timeout = React.useRef();
  const sendReport = React.useCallback(() => {
    if (timeout.current != null) {
      return;
    }

    timeout.current = setTimeout(async () => {
      if (timeout.current) {
        clearTimeout(timeout.current);
        timeout.current = undefined;
      }

      try {
        await fetch(url, {
          method: network.Method.Post,
          headers: {
            [network.Header.ContentType]: 'application/json'
          },
          body: JSON.stringify({
            connection: serializableClone(navigator.connection),
            events: events.current,
            navigations: navigations.current.map(navigation => ({
              details: navigation.toJSON({
                removeEventMetadata: false
              }),
              metadata: navigation.metadata
            })),
            pathname: window.location.pathname,
            locale
          })
        });
      } catch (error) {
        if (onError) {
          onError(error);
        }
      } finally {
        events.current = [];
        navigations.current = [];
      }
    }, 1000);
  }, [locale, onError, url]);
  const onNavigation = React.useCallback(navigation => {
    navigations.current.push(navigation);
    sendReport();
  }, [sendReport]);
  const onLifeCycleEvent = React.useCallback(event => {
    events.current.push(event);
    sendReport();
  }, [sendReport]);
  navigationListener.useNavigationListener(onNavigation);
  lifecycleEventListener.useLifecycleEventListener(onLifeCycleEvent);
}

function serializableClone(object) {
  const output = {}; // We explicitly want to copy the inherited properties
  // eslint-disable-next-line guard-for-in

  for (const key in object) {
    output[key] = object[key];
  }

  return output;
}

function noop() {}

exports.usePerformanceReport = usePerformanceReport;
