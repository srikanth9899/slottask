import { createContext, useContext, useEffect, useState, useRef, useMemo, useCallback } from 'react';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useNavigationListener, useLifecycleEventListener } from '@shopify/react-performance';
export * from '@shopify/react-performance';
import EventEmitter from 'events';
import prom from 'promjs';
import { useBeforeunload } from 'react-beforeunload';

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var GoldenMetrics;

(function (GoldenMetrics) {
  GoldenMetrics["AppLoaded"] = "prom_react_app_loaded";
  GoldenMetrics["AppUnloaded"] = "prom_react_app_unloaded";
  GoldenMetrics["PageNavigation"] = "prom_react_navigation_duration_seconds";
  GoldenMetrics["PageTimeToComplete"] = "prom_react_ttc_seconds";
  GoldenMetrics["PageTimeToUsable"] = "prom_react_ttu_seconds";
  GoldenMetrics["PerformanceTime"] = "prom_react_performance_seconds";
})(GoldenMetrics || (GoldenMetrics = {}));

var goldenMetrics = [{
  type: 'counter',
  name: GoldenMetrics.AppLoaded,
  description: 'Application loaded counter'
}, {
  type: 'counter',
  name: GoldenMetrics.AppUnloaded,
  description: 'Application unloaded counter'
}, {
  type: 'histogram',
  name: GoldenMetrics.PageNavigation,
  description: 'Total navigation duration between pages in seconds'
}, {
  type: 'histogram',
  name: GoldenMetrics.PageTimeToComplete,
  description: 'Section time to interactive in seconds'
}, {
  type: 'histogram',
  name: GoldenMetrics.PageTimeToUsable,
  description: 'Section time to usable in seconds'
}, {
  type: 'histogram',
  name: GoldenMetrics.PerformanceTime,
  description: 'Application performance load time in seconds'
}];
var createMetrics = function createMetrics(registry, defaultBuckets) {
  var customMetrics = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (registry.get('counter', GoldenMetrics.AppLoaded)) {
    // Avoid creating golden metrics if they already exist
    return;
  }

  [].concat(goldenMetrics, _toConsumableArray(customMetrics)).forEach(function (metric) {
    switch (metric.type) {
      case 'counter':
        registry.create('counter', metric.name, metric.description);
        break;

      case 'histogram':
        registry.create('histogram', metric.name, metric.description, metric.buckets || defaultBuckets);
        break;
    }
  });
};

var MetricsContext = /*#__PURE__*/createContext({});
var useMetrics = function useMetrics() {
  return useContext(MetricsContext);
};

var handleObserve = function handleObserve(_ref) {
  var metricName = _ref.metricName,
      value = _ref.value,
      tags = _ref.tags;
  // eslint-disable-next-line no-console
  console.log('[prom_react]', metricName, value, tags);
};

var MetricsLogger = function MetricsLogger() {
  var _useMetrics = useMetrics(),
      addObserveListener = _useMetrics.addObserveListener,
      removeObserveListener = _useMetrics.removeObserveListener;

  useEffect(function () {
    addObserveListener(handleObserve);
    return function () {
      removeObserveListener(handleObserve);
    };
  }, [addObserveListener, removeObserveListener]);
  return null;
};

var wrapperStyle = {
  position: 'fixed',
  right: 10,
  bottom: 10,
  padding: '15px 10px',
  zIndex: 99999,
  backgroundColor: 'rgba(0, 0, 0, 0.75)',
  minWidth: '250px',
  minHeight: '140px',
  borderRadius: 4,
  color: 'white',
  fontFamily: 'Roboto, sans-serif',
  fontSize: '1rem'
};
var titleStyle = {
  fontWeight: 'bold',
  fontSize: '1.2rem'
};
var sectionTitleStyle = {
  fontWeight: 'bold',
  color: '#a0c4ff',
  margin: '4px 0',
  fontSize: '1rem'
};
var valueStyle = {
  color: '#9bf6ff'
};

var MetricsDebugOverlay = function MetricsDebugOverlay(_ref) {
  var withLogger = _ref.withLogger,
      onClose = _ref.onClose;

  var _useMetrics = useMetrics(),
      navigationData = _useMetrics.navigationData;

  return /*#__PURE__*/jsxs("section", {
    className: "prom-react-navigation-overlay",
    style: wrapperStyle,
    children: [onClose && /*#__PURE__*/jsx("span", {
      onClick: function onClick() {
        onClose();
      },
      style: {
        position: 'absolute',
        right: 5,
        top: 5,
        cursor: 'pointer'
      },
      children: "x"
    }), /*#__PURE__*/jsx("h2", {
      style: titleStyle,
      children: "prom-react"
    }), /*#__PURE__*/jsx("h3", {
      style: sectionTitleStyle,
      children: "Last navigation"
    }), navigationData ? /*#__PURE__*/jsxs("ul", {
      style: {
        marginLeft: 5
      },
      children: [/*#__PURE__*/jsxs("li", {
        children: ["Pathname: ", /*#__PURE__*/jsx("span", {
          style: valueStyle,
          children: navigationData.path
        })]
      }), /*#__PURE__*/jsxs("li", {
        children: ["Navigation type:", ' ', /*#__PURE__*/jsx("span", {
          style: valueStyle,
          children: navigationData.isFullPageNavigation ? 'Full page' : 'In app'
        })]
      }), /*#__PURE__*/jsxs("li", {
        children: ["Duration:", ' ', /*#__PURE__*/jsxs("span", {
          style: navigationData.duration > 10000 ? {
            color: '#ffadad'
          } : valueStyle,
          children: [navigationData.duration.toFixed(2), "ms"]
        })]
      }), /*#__PURE__*/jsxs("li", {
        children: ["TTU:", ' ', /*#__PURE__*/jsxs("span", {
          style: valueStyle,
          children: [navigationData.timeToUsable.toFixed(2), "ms"]
        })]
      }), /*#__PURE__*/jsxs("li", {
        children: ["TTC:", ' ', /*#__PURE__*/jsxs("span", {
          style: valueStyle,
          children: [navigationData.timeToComplete.toFixed(2), "ms"]
        })]
      })]
    }) : '-', withLogger && /*#__PURE__*/jsx(MetricsLogger, {})]
  });
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var regenerator = runtime.exports;

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var sendMetricsToGateway = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(registry, promGatewayUrl) {
    var fetchOptions,
        isAppUnloading,
        metrics,
        keepalive,
        _args = arguments;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fetchOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            isAppUnloading = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;
            metrics = registry.metrics();

            if (!(metrics.length > 0)) {
              _context.next = 14;
              break;
            }

            keepalive = isAppUnloading ? {
              keepalive: true
            } : {};
            _context.prev = 5;
            _context.next = 8;
            return fetch(promGatewayUrl, _objectSpread$1(_objectSpread$1(_objectSpread$1({
              body: metrics,
              method: 'POST'
            }, keepalive), fetchOptions), {}, {
              headers: _objectSpread$1({
                'Content-Type': 'text/plain;charset=UTF-8'
              }, fetchOptions.headers)
            }));

          case 8:
            registry.reset();
            _context.next = 14;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](5);
            // eslint-disable-next-line no-console
            console.error('Error while sending metrics', _context.t0);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 11]]);
  }));

  return function sendMetricsToGateway(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var addToMetrics = function addToMetrics(_ref2) {
  var registry = _ref2.registry,
      metricName = _ref2.metricName,
      value = _ref2.value,
      tags = _ref2.tags;
  var histogram = registry.get('histogram', metricName);
  var counter = registry.get('counter', metricName);

  if (!histogram && !counter) {
    // eslint-disable-next-line no-console
    console.warn("[prom_react] No metric found for ".concat(metricName));
    return;
  }

  if (histogram) {
    if (typeof value === 'number') {
      histogram.observe(value, tags);
    } else {
      // eslint-disable-next-line no-console
      console.warn("[prom_react] ".concat(metricName, " is an histogram, so value is mandatory"));
      return;
    }
  }

  counter === null || counter === void 0 ? void 0 : counter.add(value !== null && value !== void 0 ? value : 1, tags);
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var defaultBuckets = [0.01, 0.1, 1, 2, 3, 4, 5, 7, 10, 15];

var MetricsProvider = function MetricsProvider(_ref) {
  var appName = _ref.appName,
      children = _ref.children,
      metricsAggregatorUrl = _ref.metricsAggregatorUrl,
      getNormalizedPath = _ref.getNormalizedPath,
      _ref$owner = _ref.owner,
      owner = _ref$owner === void 0 ? '' : _ref$owner,
      _ref$histogramBuckets = _ref.histogramBuckets,
      histogramBuckets = _ref$histogramBuckets === void 0 ? defaultBuckets : _ref$histogramBuckets,
      _ref$customMetrics = _ref.customMetrics,
      customMetrics = _ref$customMetrics === void 0 ? [] : _ref$customMetrics,
      fetchOptions = _ref.fetchOptions;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isReady = _useState2[0],
      setIsReady = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      navigationData = _useState4[0],
      setNavigationData = _useState4[1];

  var registry = useRef(prom());
  var eventEmitter = useRef(new EventEmitter());
  var defaultTags = useMemo(function () {
    return {
      app_name: appName,
      owner: owner
    };
  }, [appName, owner]);
  var sendMetrics = useCallback(function () {
    var isAppUnloading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (!metricsAggregatorUrl) {
      return;
    } // eslint-disable-next-line no-void


    void sendMetricsToGateway(registry.current, metricsAggregatorUrl, fetchOptions, isAppUnloading);
  }, [metricsAggregatorUrl, fetchOptions]);
  var observe = useCallback(function (metricName, extraTags, value) {
    var skipSend = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var tags = _objectSpread(_objectSpread({}, defaultTags), extraTags);

    addToMetrics({
      metricName: metricName,
      registry: registry.current,
      tags: tags,
      value: value
    });
    eventEmitter.current.emit('observation', {
      metricName: metricName,
      tags: tags,
      value: value
    });

    if (!skipSend) {
      sendMetrics();
    }
  }, [defaultTags, sendMetrics]);
  var addObserveListener = useCallback(function (callback) {
    eventEmitter.current.on('observation', callback);
  }, []);
  var removeObserveListener = useCallback(function (callback) {
    eventEmitter.current.off('observation', callback);
  }, []); // Cleanup load error metric if any

  useEffect(function () {
    // eslint-disable-next-line no-underscore-dangle
    window.__PROM_REACT_LOAD_FAILURE_TIMEOUT__ && // eslint-disable-next-line no-underscore-dangle
    clearTimeout(window.__PROM_REACT_LOAD_FAILURE_TIMEOUT__);
  }, []);
  useEffect(function () {
    createMetrics(registry.current, histogramBuckets, customMetrics);
    setIsReady(true);
  }, [registry, histogramBuckets, customMetrics]);
  useEffect(function () {
    observe(GoldenMetrics.AppLoaded, {
      status: 'success'
    });
  }, [appName, observe, sendMetrics]);
  useEffect(function () {
    return function () {
      eventEmitter.current.removeAllListeners();
    };
  }, []);
  useBeforeunload(function () {
    observe(GoldenMetrics.AppUnloaded, {}, undefined, true);
    sendMetrics(true);
  });
  useNavigationListener(function (navigation) {
    var start = navigation.start,
        duration = navigation.duration,
        timeToComplete = navigation.timeToComplete,
        timeToUsable = navigation.timeToUsable,
        isFullPageNavigation = navigation.isFullPageNavigation,
        target = navigation.target;
    var path = (getNormalizedPath === null || getNormalizedPath === void 0 ? void 0 : getNormalizedPath(target)) || target;
    setNavigationData({
      start: start,
      duration: duration,
      timeToComplete: timeToComplete,
      timeToUsable: timeToUsable,
      isFullPageNavigation: isFullPageNavigation,
      path: path
    });
    var tags = {
      navigation_type: isFullPageNavigation ? 'full_page' : 'in_app',
      path: path
    };
    observe(GoldenMetrics.PageNavigation, tags, duration / 1000, true);
    observe(GoldenMetrics.PageTimeToComplete, tags, timeToComplete / 1000, true);
    observe(GoldenMetrics.PageTimeToUsable, tags, timeToUsable / 1000, true);
    sendMetrics();
  });
  useLifecycleEventListener(function (_ref2) {
    var type = _ref2.type,
        start = _ref2.start;
    observe(GoldenMetrics.PerformanceTime, {
      event_type: type
    }, start / 1000, true);
  });
  return /*#__PURE__*/jsx(MetricsContext.Provider, {
    value: {
      observe: observe,
      registry: registry.current,
      isReady: isReady,
      histogramBuckets: histogramBuckets,
      navigationData: navigationData,
      sendMetrics: sendMetrics,
      addObserveListener: addObserveListener,
      removeObserveListener: removeObserveListener
    },
    children: children
  });
};

export { GoldenMetrics, MetricsContext, MetricsDebugOverlay, MetricsLogger, MetricsProvider, useMetrics };
//# sourceMappingURL=index.js.map
