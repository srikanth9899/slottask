"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateUtil = void 0;
var StringUtil_1 = require("./StringUtil");
var dayjs_1 = __importDefault(require("dayjs"));
var DateUtil = (function () {
    function DateUtil() {
    }
    DateUtil.now = function () {
        return new Date();
    };
    DateUtil.parse = function (date) {
        if (date instanceof Date) {
            return date;
        }
        else if (typeof date === 'number') {
            return this.fromTimestamp(date);
        }
        else if (typeof date === 'string') {
            if (StringUtil_1.StringUtil.isNum(date)) {
                return this.fromTimestamp(StringUtil_1.StringUtil._num(date));
            }
            else {
                var parsedDate = new Date(date);
                if (!isNaN(parsedDate.getTime())) {
                    return parsedDate;
                }
            }
        }
        else if (typeof date === 'undefined') {
            return new Date();
        }
        throw new TypeError("Time: Unable to parse " + date + " to date");
    };
    DateUtil.fromTimestamp = function (timestamp) {
        if (timestamp <= 99999999999) {
            return new Date(timestamp * 1000);
        }
        return new Date(timestamp);
    };
    DateUtil.utc = function (date) {
        if (date === void 0) { date = new Date(); }
        return date.getTime();
    };
    DateUtil.epoch = function (date) {
        if (date === void 0) { date = new Date(); }
        return Math.trunc(date.getTime() / 1000);
    };
    DateUtil.add = function (ms, date) {
        if (date === void 0) { date = new Date(); }
        return new Date(date.getTime() + ms);
    };
    DateUtil.minus = function (ms, date) {
        if (date === void 0) { date = new Date(); }
        return new Date(date.getTime() - ms);
    };
    DateUtil.isBefore = function (date, date2) {
        return date.getTime() <= date2.getTime();
    };
    DateUtil.isAfter = function (date, date2) {
        return !this.isBefore(date, date2);
    };
    DateUtil.isPast = function (date) {
        return this.isBefore(date, new Date());
    };
    DateUtil.isFuture = function (date) {
        return !this.isPast(date);
    };
    DateUtil._f = function (date, format) {
        return dayjs_1.default(date).format(format);
    };
    return DateUtil;
}());
exports.DateUtil = DateUtil;
//# sourceMappingURL=DateUtil.js.map