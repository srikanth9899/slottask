{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Counter = void 0;\n\nvar _collector = require(\"./collector\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar Counter = /*#__PURE__*/function (_Collector) {\n  _inherits(Counter, _Collector);\n\n  function Counter() {\n    _classCallCheck(this, Counter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Counter).apply(this, arguments));\n  }\n\n  _createClass(Counter, [{\n    key: \"inc\",\n    value: function inc(labels) {\n      this.add(1, labels);\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(amount, labels) {\n      if (amount < 0) {\n        throw new Error(\"Expected increment amount to be greater than -1. Received: \".concat(amount));\n      }\n\n      var metric = this.get(labels);\n      this.set(metric ? metric.value + amount : amount, labels);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(labels) {\n      this.set(0, labels);\n    }\n  }]);\n\n  return Counter;\n}(_collector.Collector);\n\nexports.Counter = Counter;","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGaA,O;;;;;;;;;;;wBACPC,QAAuB;AACzB,WAAKC,GAAL,CAAS,CAAT,EAAYD,MAAZ;AACA,aAAO,IAAP;AACD;;;wBAEGE,QAAgBF,QAAuB;AACzC,UAAIE,MAAM,GAAG,CAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,sEAAwED,MAAxE,EAAN;AACD;;AACD,UAAME,MAAM,GAAG,KAAKC,GAAL,CAASL,MAAT,CAAf;AACA,WAAKM,GAAL,CAASF,MAAM,GAAGA,MAAM,CAACG,KAAPH,GAAeF,MAAlB,GAA2BA,MAA1C,EAAkDF,MAAlD;AAEA,aAAO,IAAP;AACD;;;0BAEKA,QAAuB;AAC3B,WAAKM,GAAL,CAAS,CAAT,EAAYN,MAAZ;AACD;;;;EAlB0BQ","names":["Counter","labels","add","amount","Error","metric","get","set","value","Collector"],"sources":["D:\\3.0 SRINIVAS-WORKS\\TEMP\\user-ui\\node_modules\\src\\counter.ts"],"sourcesContent":["import { Collector } from './collector';\nimport { CounterValue, Labels } from './types';\n\nexport class Counter extends Collector<CounterValue> {\n  inc(labels?: Labels): this {\n    this.add(1, labels);\n    return this;\n  }\n\n  add(amount: number, labels?: Labels): this {\n    if (amount < 0) {\n      throw new Error(`Expected increment amount to be greater than -1. Received: ${amount}`);\n    }\n    const metric = this.get(labels);\n    this.set(metric ? metric.value + amount : amount, labels);\n\n    return this;\n  }\n\n  reset(labels?: Labels): void {\n    this.set(0, labels);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}