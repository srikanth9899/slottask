{"ast":null,"code":"import { now } from './utilities.mjs';\nimport { EventType, NavigationResult } from './types.mjs';\nimport { Navigation } from './navigation.mjs';\n\nfunction replaceResourceEvent(event, oldEvent) {\n  if (event.type !== EventType.ScriptDownload && event.type !== EventType.StyleDownload || oldEvent.type !== EventType.ScriptDownload && oldEvent.type !== EventType.StyleDownload) {\n    return false;\n  }\n\n  return event.type === oldEvent.type && event.metadata.name === oldEvent.metadata.name;\n}\n\nconst MATCHES_CHECK_MAP = new Map([// In Safari, we occasionally get the same \"resource\" event twice.\n// This check looks for a resource event with the same name, and replaces\n// it if found.\n[EventType.ScriptDownload, replaceResourceEvent], [EventType.StyleDownload, replaceResourceEvent]]);\n\nfunction defaultEqualityCheck(_ref, _ref2) {\n  let {\n    type\n  } = _ref;\n  let {\n    type: otherType\n  } = _ref2;\n  return type === otherType;\n}\n\nclass InflightNavigation {\n  constructor(_ref3, metadata) {\n    let {\n      timeOrigin,\n      start = now(),\n      target = window.location.pathname\n    } = _ref3;\n    this.metadata = metadata;\n    this.timeOrigin = void 0;\n    this.start = void 0;\n    this.target = void 0;\n    this.events = [];\n    this.timeOrigin = timeOrigin;\n    this.start = this.normalize(start);\n    this.target = target;\n  }\n\n  event(event) {\n    let replaceExisting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const normalizedEvent = { ...event,\n      start: this.normalize(event.start)\n    };\n\n    if (replaceExisting) {\n      const check = typeof replaceExisting === 'function' ? replaceExisting : MATCHES_CHECK_MAP.get(event.type) || defaultEqualityCheck;\n      const existingIndex = this.events.findIndex(oldEvent => check(event, oldEvent));\n\n      if (existingIndex >= 0) {\n        this.events.splice(existingIndex, 1, normalizedEvent);\n      } else {\n        this.events.push(normalizedEvent);\n      }\n    } else {\n      this.events.push(normalizedEvent);\n    }\n  }\n\n  cancel() {\n    let timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : now();\n    return this.end(timeStamp, NavigationResult.Cancelled);\n  }\n\n  timeout() {\n    let timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : now();\n    return this.end(timeStamp, NavigationResult.TimedOut);\n  }\n\n  finish() {\n    let timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : now();\n    return this.end(timeStamp, NavigationResult.Finished);\n  }\n\n  end(timeStamp, result) {\n    return new Navigation({\n      target: this.target,\n      start: this.start,\n      duration: this.normalize(timeStamp) - this.start,\n      events: this.events.sort((eventOne, eventTwo) => eventOne.start - eventTwo.start),\n      result\n    }, this.metadata);\n  }\n\n  normalize(timeStamp) {\n    return this.timeOrigin + timeStamp;\n  }\n\n}\n\nexport { InflightNavigation };","map":{"version":3,"sources":["D:/3.0 SRINIVAS-WORKS/TEMP/user-ui/node_modules/@shopify/performance/build/esm/inflight.mjs"],"names":["now","EventType","NavigationResult","Navigation","replaceResourceEvent","event","oldEvent","type","ScriptDownload","StyleDownload","metadata","name","MATCHES_CHECK_MAP","Map","defaultEqualityCheck","otherType","InflightNavigation","constructor","timeOrigin","start","target","window","location","pathname","events","normalize","replaceExisting","normalizedEvent","check","get","existingIndex","findIndex","splice","push","cancel","timeStamp","end","Cancelled","timeout","TimedOut","finish","Finished","result","duration","sort","eventOne","eventTwo"],"mappings":"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","sourcesContent":["import { now } from './utilities.mjs';\nimport { EventType, NavigationResult } from './types.mjs';\nimport { Navigation } from './navigation.mjs';\n\nfunction replaceResourceEvent(event, oldEvent) {\n  if (event.type !== EventType.ScriptDownload && event.type !== EventType.StyleDownload || oldEvent.type !== EventType.ScriptDownload && oldEvent.type !== EventType.StyleDownload) {\n    return false;\n  }\n\n  return event.type === oldEvent.type && event.metadata.name === oldEvent.metadata.name;\n}\n\nconst MATCHES_CHECK_MAP = new Map([// In Safari, we occasionally get the same \"resource\" event twice.\n// This check looks for a resource event with the same name, and replaces\n// it if found.\n[EventType.ScriptDownload, replaceResourceEvent], [EventType.StyleDownload, replaceResourceEvent]]);\n\nfunction defaultEqualityCheck({\n  type\n}, {\n  type: otherType\n}) {\n  return type === otherType;\n}\n\nclass InflightNavigation {\n  constructor({\n    timeOrigin,\n    start = now(),\n    target = window.location.pathname\n  }, metadata) {\n    this.metadata = metadata;\n    this.timeOrigin = void 0;\n    this.start = void 0;\n    this.target = void 0;\n    this.events = [];\n    this.timeOrigin = timeOrigin;\n    this.start = this.normalize(start);\n    this.target = target;\n  }\n\n  event(event, // Users can either force \"matching\" events to be replaced, or provide\n  // a function that checks for an event that should be replaced. This may\n  // be necessary if events can be triggered multiple times because of\n  // browser inconsistencies.\n  replaceExisting = false) {\n    const normalizedEvent = { ...event,\n      start: this.normalize(event.start)\n    };\n\n    if (replaceExisting) {\n      const check = typeof replaceExisting === 'function' ? replaceExisting : MATCHES_CHECK_MAP.get(event.type) || defaultEqualityCheck;\n      const existingIndex = this.events.findIndex(oldEvent => check(event, oldEvent));\n\n      if (existingIndex >= 0) {\n        this.events.splice(existingIndex, 1, normalizedEvent);\n      } else {\n        this.events.push(normalizedEvent);\n      }\n    } else {\n      this.events.push(normalizedEvent);\n    }\n  }\n\n  cancel(timeStamp = now()) {\n    return this.end(timeStamp, NavigationResult.Cancelled);\n  }\n\n  timeout(timeStamp = now()) {\n    return this.end(timeStamp, NavigationResult.TimedOut);\n  }\n\n  finish(timeStamp = now()) {\n    return this.end(timeStamp, NavigationResult.Finished);\n  }\n\n  end(timeStamp, result) {\n    return new Navigation({\n      target: this.target,\n      start: this.start,\n      duration: this.normalize(timeStamp) - this.start,\n      events: this.events.sort((eventOne, eventTwo) => eventOne.start - eventTwo.start),\n      result\n    }, this.metadata);\n  }\n\n  normalize(timeStamp) {\n    return this.timeOrigin + timeStamp;\n  }\n\n}\n\nexport { InflightNavigation };\n"]},"metadata":{},"sourceType":"module"}