{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport _formatNumber from './format_';\nimport parse from './parse_';\nexport default function formatNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      format = _normalizeArguments.format,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _formatNumber(input, format, options, metadata);\n} // Sort out arguments\n\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3],\n      arg_5 = _Array$prototype$slic2[4];\n\n  var input;\n  var format;\n  var options;\n  var metadata; // Sort out arguments.\n  // If the phone number is passed as a string.\n  // `format('8005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If country code is supplied.\n    // `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n    if (typeof arg_3 === 'string') {\n      format = arg_3;\n\n      if (arg_5) {\n        options = arg_4;\n        metadata = arg_5;\n      } else {\n        metadata = arg_4;\n      }\n\n      input = parse(arg_1, {\n        defaultCountry: arg_2,\n        extended: true\n      }, metadata);\n    } // Just an international phone number is supplied\n    // `format('+78005553535', 'NATIONAL', [options], metadata)`.\n    else {\n      if (typeof arg_2 !== 'string') {\n        throw new Error('`format` argument not passed to `formatNumber(number, format)`');\n      }\n\n      format = arg_2;\n\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      }\n\n      input = parse(arg_1, {\n        extended: true\n      }, metadata);\n    }\n  } // If the phone number is passed as a parsed number object.\n  // `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n  else if (is_object(arg_1)) {\n    input = arg_1;\n    format = arg_2;\n\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      metadata = arg_3;\n    }\n  } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.'); // Legacy lowercase formats.\n\n\n  if (format === 'International') {\n    format = 'INTERNATIONAL';\n  } else if (format === 'National') {\n    format = 'NATIONAL';\n  }\n\n  return {\n    input: input,\n    format: format,\n    options: options,\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,WAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,eAAe,SAASC,YAAT,GACf;AAAA,4BAQGC,kBAAkB,CAACC,SAAD,CARrB;AAAA,MAGEC,KAHF,uBAGEA,KAHF;AAAA,MAIEC,MAJF,uBAIEA,MAJF;AAAA,MAKEC,OALF,uBAKEA,OALF;AAAA,MAMEC,QANF,uBAMEA,QANF;;AAUC,SAAOR,aAAa,CAACK,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,EAAyBC,QAAzB,CAApB;EAGD;;AACA,SAASL,kBAAT,CAA4BM,IAA5B,EACA;AAAA,8BAC6CC,KAAK,CAACC,SAAND,CAAgBE,KAAhBF,CAAsBG,IAAtBH,CAA2BD,IAA3BC,CAD7C;AAAA;AAAA,MACQI,KADR;AAAA,MACeC,KADf;AAAA,MACsBC,KADtB;AAAA,MAC6BC,KAD7B;AAAA,MACoCC,KADpC;;AAGC,MAAIb,KAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,QAAJ,CAND,CAQC;AAEA;AACA;;AACA,MAAI,OAAOM,KAAP,KAAiB,QAArB,EACA;AACC;AACA;AACA,QAAI,OAAOE,KAAP,KAAiB,QAArB,EACA;AACCV,YAAM,GAAGU,KAATV;;AAEA,UAAIY,KAAJ,EACA;AACCX,eAAO,GAAIU,KAAXV;AACAC,gBAAQ,GAAGU,KAAXV;AAHD,aAMA;AACCA,gBAAQ,GAAGS,KAAXT;AACA;;AAEDH,WAAK,GAAGJ,KAAK,CAACa,KAAD,EAAQ;AAAEK,sBAAc,EAAEJ,KAAlB;AAAyBK,gBAAQ,EAAE;AAAnC,OAAR,EAAmDZ,QAAnD,CAAbH;AAdD,MAgBA;AACA;AAjBA,SAmBA;AACC,UAAI,OAAOU,KAAP,KAAiB,QAArB,EACA;AACC,cAAM,IAAIM,KAAJ,CAAU,gEAAV,CAAN;AACA;;AAEDf,YAAM,GAAGS,KAATT;;AAEA,UAAIW,KAAJ,EACA;AACCV,eAAO,GAAIS,KAAXT;AACAC,gBAAQ,GAAGS,KAAXT;AAHD,aAMA;AACCA,gBAAQ,GAAGQ,KAAXR;AACA;;AAEDH,WAAK,GAAGJ,KAAK,CAACa,KAAD,EAAQ;AAAEM,gBAAQ,EAAE;AAAZ,OAAR,EAA4BZ,QAA5B,CAAbH;AACA;AA1CF,IA4CA;AACA;AA7CA,OA8CK,IAAIiB,SAAS,CAACR,KAAD,CAAb,EACL;AACCT,SAAK,GAAIS,KAATT;AACAC,UAAM,GAAGS,KAATT;;AAEA,QAAIW,KAAJ,EACA;AACCV,aAAO,GAAIS,KAAXT;AACAC,cAAQ,GAAGS,KAAXT;AAHD,WAMA;AACCA,cAAQ,GAAGQ,KAAXR;AACA;AAbG,SAeA,MAAM,IAAIe,SAAJ,CAAc,oFAAd,CAAN,CAzEN,CA2EC;;;AACA,MAAIjB,MAAM,KAAK,eAAf,EAAgC;AAC/BA,UAAM,GAAG,eAATA;AADD,SAEO,IAAIA,MAAM,KAAK,UAAf,EAA2B;AACjCA,UAAM,GAAG,UAATA;AACA;;AAED,SAAO;AACND,SAAK,EAALA,KADM;AAENC,UAAM,EAANA,MAFM;AAGNC,WAAO,EAAPA,OAHM;AAINC,YAAQ,EAARA;AAJM,GAAP;EAQD;AACA;;AACA;;;AACA,IAAMc,SAAS,GAAG,SAAZA,SAAY,IAAC;AAAA,SAAIE,QAAOC,CAAP,MAAa,QAAjB;AAAnB","names":["_formatNumber","parse","formatNumber","normalizeArguments","arguments","input","format","options","metadata","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","arg_5","defaultCountry","extended","Error","is_object","TypeError","_typeof","_"],"sources":["D:\\3.0 SRINIVAS-WORKS\\TEMP\\user-ui\\node_modules\\libphonenumber-js\\source\\format.js"],"sourcesContent":["import _formatNumber from './format_'\r\nimport parse from './parse_'\r\n\r\nexport default function formatNumber()\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}