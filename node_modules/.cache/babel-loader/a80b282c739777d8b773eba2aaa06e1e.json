{"ast":null,"code":"import { InflightNavigation } from './inflight.mjs';\nimport { hasGlobal, referenceTime, supportsPerformanceObserver, withNavigation, withTiming, withEntriesOfType, now } from './utilities.mjs';\nimport { EventType } from './types.mjs';\nconst WATCH_RESOURCE_TYPES = ['script', 'css'];\nconst DEFAULT_TIMEOUT = 60000;\n\nclass Performance {\n  constructor() {\n    this.supportsObserver = hasGlobal('PerformanceObserver');\n    this.supportsMarks = hasGlobal('PerformanceMark');\n    this.supportsNavigationEntries = hasGlobal('PerformanceNavigationTiming');\n    this.supportsTimingEntries = hasGlobal('PerformanceTiming');\n    this.supportsLongtaskEntries = hasGlobal('PerformanceLongTaskTiming');\n    this.supportsResourceEntries = hasGlobal('PerformanceResourceTiming');\n    this.supportsPaintEntries = hasGlobal('PerformancePaintTiming');\n    this.timeOrigin = referenceTime();\n    this.supportsDetailedTime = supportsPerformanceObserver;\n    this.supportsDetailedEvents = this.supportsNavigationEntries && this.supportsLongtaskEntries && this.supportsResourceEntries && this.supportsPaintEntries;\n    this.inflightNavigation = void 0;\n    this.navigationTimeout = void 0;\n    this.firstNavigation = void 0;\n    this.lifecycleEvents = [];\n    this.navigationCount = 0;\n    this.eventHandlers = {\n      navigation: new Set(),\n      inflightNavigation: new Set(),\n      lifecycleEvent: new Set()\n    };\n    this.start({\n      timeStamp: 0\n    });\n    withNavigation(this.start.bind(this));\n\n    if (this.supportsTimingEntries && (!this.supportsDetailedTime || !this.supportsNavigationEntries)) {\n      withTiming(_ref => {\n        let {\n          responseStart,\n          domContentLoadedEventStart,\n          loadEventStart\n        } = _ref;\n        // window.performance.timing uses full timestamps, while\n        // the ones coming from observing navigation entries are\n        // time from performance.timeOrigin. We just normalize these\n        // ones to be relative to \"start\" since things listening for\n        // events expect them to be relative to when the navigation\n        // began.\n        this.lifecycleEvent({\n          type: EventType.TimeToFirstByte,\n          start: responseStart - this.timeOrigin,\n          duration: 0\n        });\n        this.lifecycleEvent({\n          type: EventType.DomContentLoaded,\n          start: domContentLoadedEventStart - this.timeOrigin,\n          duration: 0\n        });\n        this.lifecycleEvent({\n          type: EventType.Load,\n          start: loadEventStart - this.timeOrigin,\n          duration: 0\n        });\n      });\n    } else {\n      withEntriesOfType('navigation', entry => {\n        this.lifecycleEvent({\n          type: EventType.TimeToFirstByte,\n          start: entry.responseStart,\n          duration: 0\n        });\n\n        if (entry.domContentLoadedEventStart > 0) {\n          this.lifecycleEvent({\n            type: EventType.DomContentLoaded,\n            start: entry.domContentLoadedEventStart,\n            duration: 0\n          });\n        }\n\n        if (entry.loadEventStart > 0) {\n          this.lifecycleEvent({\n            type: EventType.Load,\n            start: entry.loadEventStart,\n            duration: 0\n          });\n        }\n      });\n    }\n\n    if (this.supportsResourceEntries) {\n      withEntriesOfType('resource', entry => {\n        if (!WATCH_RESOURCE_TYPES.includes(entry.initiatorType)) {\n          return;\n        }\n\n        this.event({\n          type: entry.initiatorType === 'script' ? EventType.ScriptDownload : EventType.StyleDownload,\n          start: entry.startTime,\n          duration: entry.duration,\n          metadata: {\n            name: entry.name,\n            size: entry.encodedBodySize\n          }\n        }, {\n          replace: true\n        });\n      });\n    }\n\n    if (this.supportsLongtaskEntries) {\n      withEntriesOfType('longtask', entry => {\n        this.event({\n          type: EventType.LongTask,\n          start: entry.startTime,\n          duration: entry.duration\n        });\n      });\n    }\n\n    if (this.supportsPaintEntries) {\n      withEntriesOfType('paint', entry => {\n        const type = entry.name === 'first-paint' ? EventType.TimeToFirstPaint : EventType.TimeToFirstContentfulPaint;\n        this.lifecycleEvent({\n          type,\n          start: entry.startTime,\n          duration: 0\n        });\n      });\n    }\n\n    if (typeof window !== undefined && window.perfMetrics !== undefined) {\n      window.perfMetrics.onFirstInputDelay(delay => {\n        this.lifecycleEvent({\n          type: EventType.FirstInputDelay,\n          start: now() - delay,\n          duration: delay\n        });\n      });\n    }\n  }\n\n  mark(stage, id) {\n    if (this.supportsMarks) {\n      window.performance.mark(`${id}::${stage}`);\n    }\n  }\n\n  on(event, handler) {\n    const handlers = this.eventHandlers[event];\n    handlers.add(handler); // If they are registering to hear about completed navigations, and we have already\n    // completed the first load, tell them about it. This allows them to bind to the\n    // listener later and still feel as if they had registered as early as possible.\n\n    if (event === 'navigation' && this.firstNavigation != null && this.navigationCount === 1) {\n      handler(this.firstNavigation);\n    } // If they are registered to hear about new navigations, and one is in flight,\n    // tell them right away.\n\n\n    if (event === 'inflightNavigation' && this.inflightNavigation != null) {\n      handler();\n    }\n\n    if (event === 'lifecycleEvent') {\n      for (const event of this.lifecycleEvents) {\n        handler(event);\n      }\n    }\n\n    return () => handlers.delete(handler);\n  }\n\n  event(event) {\n    let {\n      replace = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    this.inflightNavigation.event(event, replace);\n  }\n\n  start() {\n    let {\n      timeStamp = now(),\n      target = window.location.pathname,\n      timeout = DEFAULT_TIMEOUT\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.clearTimeout();\n\n    if (this.inflightNavigation) {\n      this.record(this.inflightNavigation.cancel(timeStamp));\n    }\n\n    this.inflightNavigation = new InflightNavigation({\n      timeOrigin: this.timeOrigin,\n      start: timeStamp,\n      target\n    }, {\n      index: this.navigationCount,\n      supportsDetailedTime: this.supportsDetailedTime,\n      supportsDetailedEvents: this.supportsDetailedEvents\n    });\n    this.navigationTimeout = setTimeout(() => this.timeout.bind(this), timeout);\n\n    for (const subscriber of this.eventHandlers.inflightNavigation) {\n      subscriber();\n    }\n  }\n\n  usable() {\n    let timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : now();\n    this.event({\n      type: EventType.Usable,\n      start: timeStamp,\n      duration: 0\n    }, {\n      replace: true\n    });\n  }\n\n  finish() {\n    let timeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : now();\n    this.clearTimeout();\n\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    const navigation = this.inflightNavigation.finish(timeStamp);\n    this.firstNavigation = this.firstNavigation || navigation;\n    this.record(navigation);\n    this.inflightNavigation = undefined;\n  }\n\n  lifecycleEvent(event) {\n    if (this.lifecycleEvents.find(_ref2 => {\n      let {\n        type\n      } = _ref2;\n      return type === event.type;\n    }) != null) {\n      return;\n    }\n\n    this.event(event);\n    this.lifecycleEvents.push(event);\n\n    for (const handler of this.eventHandlers.lifecycleEvent) {\n      handler(event);\n    }\n  }\n\n  timeout() {\n    this.clearTimeout();\n\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    this.record(this.inflightNavigation.timeout());\n  }\n\n  clearTimeout() {\n    if (this.navigationTimeout) {\n      clearTimeout(this.navigationTimeout);\n      this.navigationTimeout = undefined;\n    }\n  }\n\n  record(navigation) {\n    this.navigationCount += 1;\n\n    for (const subscriber of this.eventHandlers.navigation) {\n      subscriber(navigation);\n    }\n  }\n\n}\n\nexport { Performance };","map":{"version":3,"sources":["D:/3.0 SRINIVAS-WORKS/TEMP/user-ui/node_modules/@shopify/performance/build/esm/performance.mjs"],"names":["InflightNavigation","hasGlobal","referenceTime","supportsPerformanceObserver","withNavigation","withTiming","withEntriesOfType","now","EventType","WATCH_RESOURCE_TYPES","DEFAULT_TIMEOUT","Performance","constructor","supportsObserver","supportsMarks","supportsNavigationEntries","supportsTimingEntries","supportsLongtaskEntries","supportsResourceEntries","supportsPaintEntries","timeOrigin","supportsDetailedTime","supportsDetailedEvents","inflightNavigation","navigationTimeout","firstNavigation","lifecycleEvents","navigationCount","eventHandlers","navigation","Set","lifecycleEvent","start","timeStamp","bind","responseStart","domContentLoadedEventStart","loadEventStart","type","TimeToFirstByte","duration","DomContentLoaded","Load","entry","includes","initiatorType","event","ScriptDownload","StyleDownload","startTime","metadata","name","size","encodedBodySize","replace","LongTask","TimeToFirstPaint","TimeToFirstContentfulPaint","window","undefined","perfMetrics","onFirstInputDelay","delay","FirstInputDelay","mark","stage","id","performance","on","handler","handlers","add","delete","target","location","pathname","timeout","clearTimeout","record","cancel","index","setTimeout","subscriber","usable","Usable","finish","find","push"],"mappings":"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","sourcesContent":["import { InflightNavigation } from './inflight.mjs';\nimport { hasGlobal, referenceTime, supportsPerformanceObserver, withNavigation, withTiming, withEntriesOfType, now } from './utilities.mjs';\nimport { EventType } from './types.mjs';\n\nconst WATCH_RESOURCE_TYPES = ['script', 'css'];\nconst DEFAULT_TIMEOUT = 60000;\nclass Performance {\n  constructor() {\n    this.supportsObserver = hasGlobal('PerformanceObserver');\n    this.supportsMarks = hasGlobal('PerformanceMark');\n    this.supportsNavigationEntries = hasGlobal('PerformanceNavigationTiming');\n    this.supportsTimingEntries = hasGlobal('PerformanceTiming');\n    this.supportsLongtaskEntries = hasGlobal('PerformanceLongTaskTiming');\n    this.supportsResourceEntries = hasGlobal('PerformanceResourceTiming');\n    this.supportsPaintEntries = hasGlobal('PerformancePaintTiming');\n    this.timeOrigin = referenceTime();\n    this.supportsDetailedTime = supportsPerformanceObserver;\n    this.supportsDetailedEvents = this.supportsNavigationEntries && this.supportsLongtaskEntries && this.supportsResourceEntries && this.supportsPaintEntries;\n    this.inflightNavigation = void 0;\n    this.navigationTimeout = void 0;\n    this.firstNavigation = void 0;\n    this.lifecycleEvents = [];\n    this.navigationCount = 0;\n    this.eventHandlers = {\n      navigation: new Set(),\n      inflightNavigation: new Set(),\n      lifecycleEvent: new Set()\n    };\n    this.start({\n      timeStamp: 0\n    });\n    withNavigation(this.start.bind(this));\n\n    if (this.supportsTimingEntries && (!this.supportsDetailedTime || !this.supportsNavigationEntries)) {\n      withTiming(({\n        responseStart,\n        domContentLoadedEventStart,\n        loadEventStart\n      }) => {\n        // window.performance.timing uses full timestamps, while\n        // the ones coming from observing navigation entries are\n        // time from performance.timeOrigin. We just normalize these\n        // ones to be relative to \"start\" since things listening for\n        // events expect them to be relative to when the navigation\n        // began.\n        this.lifecycleEvent({\n          type: EventType.TimeToFirstByte,\n          start: responseStart - this.timeOrigin,\n          duration: 0\n        });\n        this.lifecycleEvent({\n          type: EventType.DomContentLoaded,\n          start: domContentLoadedEventStart - this.timeOrigin,\n          duration: 0\n        });\n        this.lifecycleEvent({\n          type: EventType.Load,\n          start: loadEventStart - this.timeOrigin,\n          duration: 0\n        });\n      });\n    } else {\n      withEntriesOfType('navigation', entry => {\n        this.lifecycleEvent({\n          type: EventType.TimeToFirstByte,\n          start: entry.responseStart,\n          duration: 0\n        });\n\n        if (entry.domContentLoadedEventStart > 0) {\n          this.lifecycleEvent({\n            type: EventType.DomContentLoaded,\n            start: entry.domContentLoadedEventStart,\n            duration: 0\n          });\n        }\n\n        if (entry.loadEventStart > 0) {\n          this.lifecycleEvent({\n            type: EventType.Load,\n            start: entry.loadEventStart,\n            duration: 0\n          });\n        }\n      });\n    }\n\n    if (this.supportsResourceEntries) {\n      withEntriesOfType('resource', entry => {\n        if (!WATCH_RESOURCE_TYPES.includes(entry.initiatorType)) {\n          return;\n        }\n\n        this.event({\n          type: entry.initiatorType === 'script' ? EventType.ScriptDownload : EventType.StyleDownload,\n          start: entry.startTime,\n          duration: entry.duration,\n          metadata: {\n            name: entry.name,\n            size: entry.encodedBodySize\n          }\n        }, {\n          replace: true\n        });\n      });\n    }\n\n    if (this.supportsLongtaskEntries) {\n      withEntriesOfType('longtask', entry => {\n        this.event({\n          type: EventType.LongTask,\n          start: entry.startTime,\n          duration: entry.duration\n        });\n      });\n    }\n\n    if (this.supportsPaintEntries) {\n      withEntriesOfType('paint', entry => {\n        const type = entry.name === 'first-paint' ? EventType.TimeToFirstPaint : EventType.TimeToFirstContentfulPaint;\n        this.lifecycleEvent({\n          type,\n          start: entry.startTime,\n          duration: 0\n        });\n      });\n    }\n\n    if (typeof window !== undefined && window.perfMetrics !== undefined) {\n      window.perfMetrics.onFirstInputDelay(delay => {\n        this.lifecycleEvent({\n          type: EventType.FirstInputDelay,\n          start: now() - delay,\n          duration: delay\n        });\n      });\n    }\n  }\n\n  mark(stage, id) {\n    if (this.supportsMarks) {\n      window.performance.mark(`${id}::${stage}`);\n    }\n  }\n\n  on(event, handler) {\n    const handlers = this.eventHandlers[event];\n    handlers.add(handler); // If they are registering to hear about completed navigations, and we have already\n    // completed the first load, tell them about it. This allows them to bind to the\n    // listener later and still feel as if they had registered as early as possible.\n\n    if (event === 'navigation' && this.firstNavigation != null && this.navigationCount === 1) {\n      handler(this.firstNavigation);\n    } // If they are registered to hear about new navigations, and one is in flight,\n    // tell them right away.\n\n\n    if (event === 'inflightNavigation' && this.inflightNavigation != null) {\n      handler();\n    }\n\n    if (event === 'lifecycleEvent') {\n      for (const event of this.lifecycleEvents) {\n        handler(event);\n      }\n    }\n\n    return () => handlers.delete(handler);\n  }\n\n  event(event, {\n    replace = false\n  } = {}) {\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    this.inflightNavigation.event(event, replace);\n  }\n\n  start({\n    timeStamp = now(),\n    target = window.location.pathname,\n    timeout = DEFAULT_TIMEOUT\n  } = {}) {\n    this.clearTimeout();\n\n    if (this.inflightNavigation) {\n      this.record(this.inflightNavigation.cancel(timeStamp));\n    }\n\n    this.inflightNavigation = new InflightNavigation({\n      timeOrigin: this.timeOrigin,\n      start: timeStamp,\n      target\n    }, {\n      index: this.navigationCount,\n      supportsDetailedTime: this.supportsDetailedTime,\n      supportsDetailedEvents: this.supportsDetailedEvents\n    });\n    this.navigationTimeout = setTimeout(() => this.timeout.bind(this), timeout);\n\n    for (const subscriber of this.eventHandlers.inflightNavigation) {\n      subscriber();\n    }\n  }\n\n  usable(timeStamp = now()) {\n    this.event({\n      type: EventType.Usable,\n      start: timeStamp,\n      duration: 0\n    }, {\n      replace: true\n    });\n  }\n\n  finish(timeStamp = now()) {\n    this.clearTimeout();\n\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    const navigation = this.inflightNavigation.finish(timeStamp);\n    this.firstNavigation = this.firstNavigation || navigation;\n    this.record(navigation);\n    this.inflightNavigation = undefined;\n  }\n\n  lifecycleEvent(event) {\n    if (this.lifecycleEvents.find(({\n      type\n    }) => type === event.type) != null) {\n      return;\n    }\n\n    this.event(event);\n    this.lifecycleEvents.push(event);\n\n    for (const handler of this.eventHandlers.lifecycleEvent) {\n      handler(event);\n    }\n  }\n\n  timeout() {\n    this.clearTimeout();\n\n    if (this.inflightNavigation == null) {\n      return;\n    }\n\n    this.record(this.inflightNavigation.timeout());\n  }\n\n  clearTimeout() {\n    if (this.navigationTimeout) {\n      clearTimeout(this.navigationTimeout);\n      this.navigationTimeout = undefined;\n    }\n  }\n\n  record(navigation) {\n    this.navigationCount += 1;\n\n    for (const subscriber of this.eventHandlers.navigation) {\n      subscriber(navigation);\n    }\n  }\n\n}\n\nexport { Performance };\n"]},"metadata":{},"sourceType":"module"}