{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collector = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"./utils\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Collector = /*#__PURE__*/function () {\n  function Collector() {\n    _classCallCheck(this, Collector);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = [];\n  }\n\n  _createClass(Collector, [{\n    key: \"get\",\n    value: function get(labels) {\n      return (0, _utils.findExistingMetric)(labels, this.data);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, labels) {\n      var existing = (0, _utils.findExistingMetric)(labels, this.data);\n\n      if (existing) {\n        existing.value = value;\n      } else {\n        this.data.push({\n          labels: labels,\n          value: value\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"collect\",\n    value: function collect(labels) {\n      return (0, _lodash.filter)(this.data, function (item) {\n        return (0, _lodash.matches)(labels)(item.labels);\n      });\n    }\n  }, {\n    key: \"resetAll\",\n    value: function resetAll() {\n      var _this = this;\n\n      (0, _lodash.each)(this.data, function (d) {\n        _this.reset(d.labels);\n      });\n      return this;\n    }\n  }]);\n\n  return Collector;\n}();\n\nexports.Collector = Collector;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEsBA,S;AAGpB,uBAAc;AAAAC;;AAAAC;;AACZ,SAAKC,IAAL,GAAY,EAAZ;AACD;;;;wBAEGC,QAAwC;AAC1C,aAAO,+BAAsBA,MAAtB,EAA8B,KAAKD,IAAnC,CAAP;AACD;;;wBAEGE,OAAUD,QAAuB;AACnC,UAAME,QAAQ,GAAG,+BAAmBF,MAAnB,EAA2B,KAAKD,IAAhC,CAAjB;;AACA,UAAIG,QAAJ,EAAc;AACZA,gBAAQ,CAACD,KAATC,GAAiBD,KAAjBC;AADF,aAEO;AACL,aAAKH,IAAL,CAAUI,IAAV,CAAe;AACbH,gBAAM,EAANA,MADa;AAEbC,eAAK,EAALA;AAFa,SAAf;AAID;;AAED,aAAO,IAAP;AACD;;;4BAEOD,QAA8B;AACpC,aAAO,oBAAO,KAAKD,IAAZ,EAAkB,gBAAI;AAAA,eAAI,qBAAQC,MAAR,EAAgBI,IAAI,CAACJ,MAArB,CAAJ;AAAtB,QAAP;AACD;;;+BAEgB;AAAA;;AACf,wBAAK,KAAKD,IAAV,EAAgB,UAACM,CAAD,EAAO;AACrBC,aAAI,CAACC,KAAL,CAAWF,CAAC,CAACL,MAAb;AADF;AAIA,aAAO,IAAP;AACD","names":["Collector","_classCallCheck","_defineProperty","data","labels","value","existing","push","item","d","_this","reset"],"sources":["D:\\3.0 SRINIVAS-WORKS\\TEMP\\user-ui\\node_modules\\src\\collector.ts"],"sourcesContent":["import { filter, matches, each } from 'lodash';\nimport { Labels, Metric, MetricValue } from './types';\nimport { findExistingMetric } from './utils';\n\nexport abstract class Collector<T extends MetricValue> {\n  private readonly data: Metric<T>[];\n\n  constructor() {\n    this.data = [];\n  }\n\n  get(labels?: Labels): Metric<T> | undefined {\n    return findExistingMetric<T>(labels, this.data);\n  }\n\n  set(value: T, labels?: Labels): this {\n    const existing = findExistingMetric(labels, this.data);\n    if (existing) {\n      existing.value = value;\n    } else {\n      this.data.push({\n        labels,\n        value,\n      });\n    }\n\n    return this;\n  }\n\n  collect(labels?: Labels): Metric<T>[] {\n    return filter(this.data, item => matches(labels)(item.labels));\n  }\n\n  resetAll(): this {\n    each(this.data, (d) => {\n      this.reset(d.labels);\n    });\n\n    return this;\n  }\n\n  abstract reset(labels?: Labels): void;\n}\n"]},"metadata":{},"sourceType":"script"}