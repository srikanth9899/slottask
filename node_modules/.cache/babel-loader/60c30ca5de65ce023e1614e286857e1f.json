{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport { Method, Header } from '@shopify/network';\nimport { useNavigationListener } from './navigation-listener.mjs';\nimport { useLifecycleEventListener } from './lifecycle-event-listener.mjs';\n\nfunction usePerformanceReport(url) {\n  let {\n    locale = undefined,\n    onError = noop\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const navigations = useRef([]);\n  const events = useRef([]);\n  const timeout = useRef();\n  const sendReport = useCallback(() => {\n    if (timeout.current != null) {\n      return;\n    }\n\n    timeout.current = setTimeout(async () => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = undefined;\n      }\n\n      try {\n        await fetch(url, {\n          method: Method.Post,\n          headers: {\n            [Header.ContentType]: 'application/json'\n          },\n          body: JSON.stringify({\n            connection: serializableClone(navigator.connection),\n            events: events.current,\n            navigations: navigations.current.map(navigation => ({\n              details: navigation.toJSON({\n                removeEventMetadata: false\n              }),\n              metadata: navigation.metadata\n            })),\n            pathname: window.location.pathname,\n            locale\n          })\n        });\n      } catch (error) {\n        if (onError) {\n          onError(error);\n        }\n      } finally {\n        events.current = [];\n        navigations.current = [];\n      }\n    }, 1000);\n  }, [locale, onError, url]);\n  const onNavigation = useCallback(navigation => {\n    navigations.current.push(navigation);\n    sendReport();\n  }, [sendReport]);\n  const onLifeCycleEvent = useCallback(event => {\n    events.current.push(event);\n    sendReport();\n  }, [sendReport]);\n  useNavigationListener(onNavigation);\n  useLifecycleEventListener(onLifeCycleEvent);\n}\n\nfunction serializableClone(object) {\n  const output = {}; // We explicitly want to copy the inherited properties\n  // eslint-disable-next-line guard-for-in\n\n  for (const key in object) {\n    output[key] = object[key];\n  }\n\n  return output;\n}\n\nfunction noop() {}\n\nexport { usePerformanceReport };","map":{"version":3,"sources":["D:/3.0 SRINIVAS-WORKS/TEMP/user-ui/node_modules/@shopify/react-performance/build/esm/performance-report.mjs"],"names":["useRef","useCallback","Method","Header","useNavigationListener","useLifecycleEventListener","usePerformanceReport","url","locale","undefined","onError","noop","navigations","events","timeout","sendReport","current","setTimeout","clearTimeout","fetch","method","Post","headers","ContentType","body","JSON","stringify","connection","serializableClone","navigator","map","navigation","details","toJSON","removeEventMetadata","metadata","pathname","window","location","error","onNavigation","push","onLifeCycleEvent","event","object","output","key"],"mappings":"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","sourcesContent":["import { useRef, useCallback } from 'react';\nimport { Method, Header } from '@shopify/network';\nimport { useNavigationListener } from './navigation-listener.mjs';\nimport { useLifecycleEventListener } from './lifecycle-event-listener.mjs';\n\nfunction usePerformanceReport(url, {\n  locale = undefined,\n  onError = noop\n} = {}) {\n  const navigations = useRef([]);\n  const events = useRef([]);\n  const timeout = useRef();\n  const sendReport = useCallback(() => {\n    if (timeout.current != null) {\n      return;\n    }\n\n    timeout.current = setTimeout(async () => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = undefined;\n      }\n\n      try {\n        await fetch(url, {\n          method: Method.Post,\n          headers: {\n            [Header.ContentType]: 'application/json'\n          },\n          body: JSON.stringify({\n            connection: serializableClone(navigator.connection),\n            events: events.current,\n            navigations: navigations.current.map(navigation => ({\n              details: navigation.toJSON({\n                removeEventMetadata: false\n              }),\n              metadata: navigation.metadata\n            })),\n            pathname: window.location.pathname,\n            locale\n          })\n        });\n      } catch (error) {\n        if (onError) {\n          onError(error);\n        }\n      } finally {\n        events.current = [];\n        navigations.current = [];\n      }\n    }, 1000);\n  }, [locale, onError, url]);\n  const onNavigation = useCallback(navigation => {\n    navigations.current.push(navigation);\n    sendReport();\n  }, [sendReport]);\n  const onLifeCycleEvent = useCallback(event => {\n    events.current.push(event);\n    sendReport();\n  }, [sendReport]);\n  useNavigationListener(onNavigation);\n  useLifecycleEventListener(onLifeCycleEvent);\n}\n\nfunction serializableClone(object) {\n  const output = {}; // We explicitly want to copy the inherited properties\n  // eslint-disable-next-line guard-for-in\n\n  for (const key in object) {\n    output[key] = object[key];\n  }\n\n  return output;\n}\n\nfunction noop() {}\n\nexport { usePerformanceReport };\n"]},"metadata":{},"sourceType":"module"}