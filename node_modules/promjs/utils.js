"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatHistogramOrSummary = formatHistogramOrSummary;
exports.findExistingMetric = findExistingMetric;
exports.formatCounterOrGauge = formatCounterOrGauge;

var _lodash = require("lodash");

function getLabelPairs(metric) {
  var pairs = (0, _lodash.map)(metric.labels, function (v, k) {
    return "".concat(k, "=\"").concat(v, "\"");
  });
  return pairs.length === 0 ? '' : "".concat(pairs.join(','));
}

function formatHistogramOrSummary(name, metric) {
  var bucketLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'le';
  var str = '';
  var labels = getLabelPairs(metric);

  if (labels.length > 0) {
    str += "".concat(name, "_count{").concat(labels, "} ").concat(metric.value.count, "\n");
    str += "".concat(name, "_sum{").concat(labels, "} ").concat(metric.value.sum, "\n");
  } else {
    str += "".concat(name, "_count ").concat(metric.value.count, "\n");
    str += "".concat(name, "_sum ").concat(metric.value.sum, "\n");
  }

  return (0, _lodash.reduce)(metric.value.entries, function (result, count, bucket) {
    if (labels.length > 0) {
      str += "".concat(name, "_bucket{").concat(bucketLabel, "=\"").concat(bucket, "\",").concat(labels, "} ").concat(count, "\n");
    } else {
      str += "".concat(name, "_bucket{").concat(bucketLabel, "=\"").concat(bucket, "\"} ").concat(count, "\n");
    }

    return str;
  }, str);
}

function findExistingMetric(labels) {
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  // If there are no labels, there can only be one metric
  if (!labels) {
    return values[0];
  }

  return (0, _lodash.find)(values, function (v) {
    return (0, _lodash.isEqual)(v.labels, labels);
  });
}

function formatCounterOrGauge(name, metric) {
  var value = " ".concat(metric.value.toString()); // If there are no keys on `metric`, it doesn't have a label;
  // return the count as a string.

  if (metric.labels == null || Object.keys(metric.labels).length === 0) {
    return "".concat(name).concat(value, "\n");
  }

  var pair = (0, _lodash.map)(metric.labels, function (v, k) {
    return "".concat(k, "=\"").concat(v, "\"");
  });
  return "".concat(name, "{").concat(pair.join(','), "}").concat(value, "\n");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy50cyJdLCJuYW1lcyI6WyJnZXRMYWJlbFBhaXJzIiwibWV0cmljIiwicGFpcnMiLCJsYWJlbHMiLCJ2IiwiayIsImxlbmd0aCIsImpvaW4iLCJmb3JtYXRIaXN0b2dyYW1PclN1bW1hcnkiLCJuYW1lIiwiYnVja2V0TGFiZWwiLCJzdHIiLCJ2YWx1ZSIsImNvdW50Iiwic3VtIiwiZW50cmllcyIsInJlc3VsdCIsImJ1Y2tldCIsImZpbmRFeGlzdGluZ01ldHJpYyIsInZhbHVlcyIsImZvcm1hdENvdW50ZXJPckdhdWdlIiwidG9TdHJpbmciLCJPYmplY3QiLCJrZXlzIiwicGFpciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0EsU0FBU0EsYUFBVCxDQUF1QkMsTUFBdkIsRUFBNEQ7QUFDMUQsTUFBTUMsS0FBSyxHQUFHLGlCQUFJRCxNQUFNLENBQUNFLE1BQVgsRUFBbUIsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEscUJBQWFBLENBQWIsZ0JBQW1CRCxDQUFuQjtBQUFBLEdBQW5CLENBQWQ7QUFDQSxTQUFPRixLQUFLLENBQUNJLE1BQU4sS0FBaUIsQ0FBakIsR0FBcUIsRUFBckIsYUFBNkJKLEtBQUssQ0FBQ0ssSUFBTixDQUFXLEdBQVgsQ0FBN0IsQ0FBUDtBQUNEOztBQUVNLFNBQVNDLHdCQUFULENBQ0xDLElBREssRUFFTFIsTUFGSyxFQUlHO0FBQUEsTUFEUlMsV0FDUSx1RUFETSxJQUNOO0FBQ1IsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFNUixNQUFNLEdBQUdILGFBQWEsQ0FBQ0MsTUFBRCxDQUE1Qjs7QUFDQSxNQUFJRSxNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJLLElBQUFBLEdBQUcsY0FBT0YsSUFBUCxvQkFBcUJOLE1BQXJCLGVBQWdDRixNQUFNLENBQUNXLEtBQVAsQ0FBYUMsS0FBN0MsT0FBSDtBQUNBRixJQUFBQSxHQUFHLGNBQU9GLElBQVAsa0JBQW1CTixNQUFuQixlQUE4QkYsTUFBTSxDQUFDVyxLQUFQLENBQWFFLEdBQTNDLE9BQUg7QUFDRCxHQUhELE1BR087QUFDTEgsSUFBQUEsR0FBRyxjQUFPRixJQUFQLG9CQUFxQlIsTUFBTSxDQUFDVyxLQUFQLENBQWFDLEtBQWxDLE9BQUg7QUFDQUYsSUFBQUEsR0FBRyxjQUFPRixJQUFQLGtCQUFtQlIsTUFBTSxDQUFDVyxLQUFQLENBQWFFLEdBQWhDLE9BQUg7QUFDRDs7QUFFRCxTQUFPLG9CQUFPYixNQUFNLENBQUNXLEtBQVAsQ0FBYUcsT0FBcEIsRUFBNkIsVUFBQ0MsTUFBRCxFQUFTSCxLQUFULEVBQWdCSSxNQUFoQixFQUEyQjtBQUM3RCxRQUFJZCxNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJLLE1BQUFBLEdBQUcsY0FBT0YsSUFBUCxxQkFBc0JDLFdBQXRCLGdCQUFzQ08sTUFBdEMsZ0JBQWlEZCxNQUFqRCxlQUE0RFUsS0FBNUQsT0FBSDtBQUNELEtBRkQsTUFFTztBQUNMRixNQUFBQSxHQUFHLGNBQU9GLElBQVAscUJBQXNCQyxXQUF0QixnQkFBc0NPLE1BQXRDLGlCQUFrREosS0FBbEQsT0FBSDtBQUNEOztBQUVELFdBQU9GLEdBQVA7QUFDRCxHQVJNLEVBUUpBLEdBUkksQ0FBUDtBQVNEOztBQUVNLFNBQVNPLGtCQUFULENBQ0xmLE1BREssRUFHa0I7QUFBQSxNQUR2QmdCLE1BQ3VCLHVFQURELEVBQ0M7O0FBQ3ZCO0FBQ0EsTUFBSSxDQUFDaEIsTUFBTCxFQUFhO0FBQ1gsV0FBT2dCLE1BQU0sQ0FBQyxDQUFELENBQWI7QUFDRDs7QUFDRCxTQUFPLGtCQUFLQSxNQUFMLEVBQWEsVUFBQWYsQ0FBQztBQUFBLFdBQUkscUJBQVFBLENBQUMsQ0FBQ0QsTUFBVixFQUFrQkEsTUFBbEIsQ0FBSjtBQUFBLEdBQWQsQ0FBUDtBQUNEOztBQUVNLFNBQVNpQixvQkFBVCxDQUE4QlgsSUFBOUIsRUFBNENSLE1BQTVDLEVBQWlGO0FBQ3RGLE1BQU1XLEtBQUssY0FBT1gsTUFBTSxDQUFDVyxLQUFQLENBQWFTLFFBQWIsRUFBUCxDQUFYLENBRHNGLENBRXRGO0FBQ0E7O0FBQ0EsTUFBSXBCLE1BQU0sQ0FBQ0UsTUFBUCxJQUFpQixJQUFqQixJQUF5Qm1CLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZdEIsTUFBTSxDQUFDRSxNQUFuQixFQUEyQkcsTUFBM0IsS0FBc0MsQ0FBbkUsRUFBc0U7QUFDcEUscUJBQVVHLElBQVYsU0FBaUJHLEtBQWpCO0FBQ0Q7O0FBQ0QsTUFBTVksSUFBSSxHQUFHLGlCQUFJdkIsTUFBTSxDQUFDRSxNQUFYLEVBQW1CLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLHFCQUFhQSxDQUFiLGdCQUFtQkQsQ0FBbkI7QUFBQSxHQUFuQixDQUFiO0FBQ0EsbUJBQVVLLElBQVYsY0FBa0JlLElBQUksQ0FBQ2pCLElBQUwsQ0FBVSxHQUFWLENBQWxCLGNBQW9DSyxLQUFwQztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmluZCwgaXNFcXVhbCwgbWFwLCByZWR1Y2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSGlzdG9ncmFtVmFsdWUsIExhYmVscywgTWV0cmljLCBNZXRyaWNWYWx1ZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5mdW5jdGlvbiBnZXRMYWJlbFBhaXJzKG1ldHJpYzogTWV0cmljPE1ldHJpY1ZhbHVlPik6IHN0cmluZyB7XG4gIGNvbnN0IHBhaXJzID0gbWFwKG1ldHJpYy5sYWJlbHMsICh2LCBrKSA9PiBgJHtrfT1cIiR7dn1cImApO1xuICByZXR1cm4gcGFpcnMubGVuZ3RoID09PSAwID8gJycgOiBgJHtwYWlycy5qb2luKCcsJyl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEhpc3RvZ3JhbU9yU3VtbWFyeShcbiAgbmFtZTogc3RyaW5nLFxuICBtZXRyaWM6IE1ldHJpYzxIaXN0b2dyYW1WYWx1ZT4sXG4gIGJ1Y2tldExhYmVsID0gJ2xlJyxcbik6IHN0cmluZyB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3QgbGFiZWxzID0gZ2V0TGFiZWxQYWlycyhtZXRyaWMpO1xuICBpZiAobGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgKz0gYCR7bmFtZX1fY291bnR7JHtsYWJlbHN9fSAke21ldHJpYy52YWx1ZS5jb3VudH1cXG5gO1xuICAgIHN0ciArPSBgJHtuYW1lfV9zdW17JHtsYWJlbHN9fSAke21ldHJpYy52YWx1ZS5zdW19XFxuYDtcbiAgfSBlbHNlIHtcbiAgICBzdHIgKz0gYCR7bmFtZX1fY291bnQgJHttZXRyaWMudmFsdWUuY291bnR9XFxuYDtcbiAgICBzdHIgKz0gYCR7bmFtZX1fc3VtICR7bWV0cmljLnZhbHVlLnN1bX1cXG5gO1xuICB9XG5cbiAgcmV0dXJuIHJlZHVjZShtZXRyaWMudmFsdWUuZW50cmllcywgKHJlc3VsdCwgY291bnQsIGJ1Y2tldCkgPT4ge1xuICAgIGlmIChsYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgc3RyICs9IGAke25hbWV9X2J1Y2tldHske2J1Y2tldExhYmVsfT1cIiR7YnVja2V0fVwiLCR7bGFiZWxzfX0gJHtjb3VudH1cXG5gO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gYCR7bmFtZX1fYnVja2V0eyR7YnVja2V0TGFiZWx9PVwiJHtidWNrZXR9XCJ9ICR7Y291bnR9XFxuYDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9LCBzdHIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEV4aXN0aW5nTWV0cmljPFQgZXh0ZW5kcyBNZXRyaWNWYWx1ZT4oXG4gIGxhYmVscz86IExhYmVscyxcbiAgdmFsdWVzOiBNZXRyaWM8VD5bXSA9IFtdLFxuKTogTWV0cmljPFQ+IHwgdW5kZWZpbmVkIHtcbiAgLy8gSWYgdGhlcmUgYXJlIG5vIGxhYmVscywgdGhlcmUgY2FuIG9ubHkgYmUgb25lIG1ldHJpY1xuICBpZiAoIWxhYmVscykge1xuICAgIHJldHVybiB2YWx1ZXNbMF07XG4gIH1cbiAgcmV0dXJuIGZpbmQodmFsdWVzLCB2ID0+IGlzRXF1YWwodi5sYWJlbHMsIGxhYmVscykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Q291bnRlck9yR2F1Z2UobmFtZTogc3RyaW5nLCBtZXRyaWM6IE1ldHJpYzxNZXRyaWNWYWx1ZT4pOiBzdHJpbmcge1xuICBjb25zdCB2YWx1ZSA9IGAgJHttZXRyaWMudmFsdWUudG9TdHJpbmcoKX1gO1xuICAvLyBJZiB0aGVyZSBhcmUgbm8ga2V5cyBvbiBgbWV0cmljYCwgaXQgZG9lc24ndCBoYXZlIGEgbGFiZWw7XG4gIC8vIHJldHVybiB0aGUgY291bnQgYXMgYSBzdHJpbmcuXG4gIGlmIChtZXRyaWMubGFiZWxzID09IG51bGwgfHwgT2JqZWN0LmtleXMobWV0cmljLmxhYmVscykubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGAke25hbWV9JHt2YWx1ZX1cXG5gO1xuICB9XG4gIGNvbnN0IHBhaXIgPSBtYXAobWV0cmljLmxhYmVscywgKHYsIGspID0+IGAke2t9PVwiJHt2fVwiYCk7XG4gIHJldHVybiBgJHtuYW1lfXske3BhaXIuam9pbignLCcpfX0ke3ZhbHVlfVxcbmA7XG59XG4iXX0=