"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Registry = void 0;

var _lodash = require("lodash");

var _counter = require("./counter");

var _gauge = require("./gauge");

var _histogram = require("./histogram");

var _utils = require("./utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Registry =
/*#__PURE__*/
function () {
  function Registry() {
    _classCallCheck(this, Registry);

    _defineProperty(this, "data", void 0);

    this.data = {
      counter: {},
      gauge: {},
      histogram: {}
    };
  }

  _createClass(Registry, [{
    key: "validateInput",
    value: function validateInput(type, name, help, buckets) {
      // checks for js runtime
      if (String(name) === '') {
        throw new Error('Metric name cannot be empty');
      }

      if (['counter', 'gauge', 'histogram'].indexOf(type) === -1) {
        throw new Error("Unknown metric type ".concat(type));
      }

      if (typeof help !== 'string' && help != null) {
        throw new Error('help must be string or undefined/null');
      }

      if ((0, _lodash.has)(this.data, "".concat(type, ".").concat(name))) {
        throw new Error("A metric with the name '".concat(name, "' already exists for type '").concat(type, "'"));
      }

      if (!Array.isArray(buckets) && buckets != null) {
        throw new Error('buckets must be array or undefined/null');
      }
    }
  }, {
    key: "create",
    value: function create(type, name) {
      var help = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var histogramBuckets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      this.validateInput(type, name, help, histogramBuckets);
      var instance;

      if (type === 'counter') {
        instance = new _counter.Counter();
        this.data.counter[name] = {
          help: help,
          instance: instance,
          type: type
        };
      } else if (type === 'gauge') {
        instance = new _gauge.Gauge();
        this.data.gauge[name] = {
          help: help,
          instance: instance,
          type: type
        };
      } else {
        instance = new _histogram.Histogram(histogramBuckets);
        this.data.histogram[name] = {
          help: help,
          instance: instance,
          type: type
        };
      }

      return instance;
    }
    /**
     * Returns a string in the prometheus' desired format
     * More info: https://prometheus.io/docs/concepts/data_model/
     * Loop through each metric type (counter, histogram, etc);
     *
     * @return {string}
     */

  }, {
    key: "metrics",
    value: function metrics() {
      return (0, _lodash.reduce)(this.data, function (output, metrics, type) {
        return output + (0, _lodash.reduce)(metrics, function (src, metric, name) {
          var values = metric.instance.collect();
          var result = src;

          if (metric.help.length > 0) {
            result += "# HELP ".concat(name, " ").concat(metric.help, "\n");
          }

          result += "# TYPE ".concat(name, " ").concat(type, "\n"); // Each metric can have many labels. Iterate over each and append to the string.

          result += (0, _lodash.reduce)(values, function (str, value) {
            var formatted = type === 'histogram' ? (0, _utils.formatHistogramOrSummary)(name, value) : (0, _utils.formatCounterOrGauge)(name, value);
            return str + formatted;
          }, '');
          return result;
        }, '');
      }, '');
    }
  }, {
    key: "reset",
    value: function reset() {
      (0, _lodash.each)(this.data, function (metrics) {
        (0, _lodash.each)(metrics, function (_ref) {
          var instance = _ref.instance;
          instance.resetAll();
        });
      });
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.data = {
        counter: {},
        gauge: {},
        histogram: {}
      };
      return this;
    }
  }, {
    key: "get",
    value: function get(type, name) {
      var registryItems = type != null ? [this.data[type]] : (0, _lodash.valuesIn)(this.data);
      var metric = registryItems.find(function (v) {
        return (0, _lodash.has)(v, name);
      });
      return metric != null ? metric[name].instance : undefined;
    }
  }]);

  return Registry;
}();

exports.Registry = Registry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWdpc3RyeS50cyJdLCJuYW1lcyI6WyJSZWdpc3RyeSIsImRhdGEiLCJjb3VudGVyIiwiZ2F1Z2UiLCJoaXN0b2dyYW0iLCJ0eXBlIiwibmFtZSIsImhlbHAiLCJidWNrZXRzIiwiU3RyaW5nIiwiRXJyb3IiLCJpbmRleE9mIiwiQXJyYXkiLCJpc0FycmF5IiwiaGlzdG9ncmFtQnVja2V0cyIsInZhbGlkYXRlSW5wdXQiLCJpbnN0YW5jZSIsIkNvdW50ZXIiLCJHYXVnZSIsIkhpc3RvZ3JhbSIsIm91dHB1dCIsIm1ldHJpY3MiLCJzcmMiLCJtZXRyaWMiLCJ2YWx1ZXMiLCJjb2xsZWN0IiwicmVzdWx0IiwibGVuZ3RoIiwic3RyIiwidmFsdWUiLCJmb3JtYXR0ZWQiLCJyZXNldEFsbCIsInJlZ2lzdHJ5SXRlbXMiLCJmaW5kIiwidiIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUdBOzs7Ozs7Ozs7O0lBZ0JhQSxROzs7QUFLWCxzQkFBYztBQUFBOztBQUFBOztBQUNaLFNBQUtDLElBQUwsR0FBWTtBQUNWQyxNQUFBQSxPQUFPLEVBQUUsRUFEQztBQUVWQyxNQUFBQSxLQUFLLEVBQUUsRUFGRztBQUdWQyxNQUFBQSxTQUFTLEVBQUU7QUFIRCxLQUFaO0FBS0Q7Ozs7a0NBR0NDLEksRUFDQUMsSSxFQUNBQyxJLEVBQ0FDLE8sRUFDTTtBQUNOO0FBQ0EsVUFBSUMsTUFBTSxDQUFDSCxJQUFELENBQU4sS0FBaUIsRUFBckIsRUFBeUI7QUFDdkIsY0FBTSxJQUFJSSxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNEOztBQUNELFVBQUksQ0FBQyxTQUFELEVBQVksT0FBWixFQUFxQixXQUFyQixFQUFrQ0MsT0FBbEMsQ0FBMENOLElBQTFDLE1BQW9ELENBQUMsQ0FBekQsRUFBNEQ7QUFDMUQsY0FBTSxJQUFJSyxLQUFKLCtCQUFpQ0wsSUFBakMsRUFBTjtBQUNEOztBQUVELFVBQUksT0FBT0Us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Rko7QUFHQSxtQkFBT0QsR0FBRyxHQUFHRSxTQUFiO0FBQ0QsV0FMUyxFQUtQLEVBTE8sQ0FBVjtBQU1BLGlCQUFPSixNQUFQO0FBQ0QsU0FmbUMsRUFlakMsRUFmaUMsQ0FBcEM7QUFBQSxPQURLLEVBaUJMLEVBakJLLENBQVA7QUFrQkQ7Ozs0QkFFYTtBQUNaLHdCQUFLLEtBQUt6QixJQUFWLEVBQWdCLFVBQUNvQixPQUFELEVBQWE7QUFDM0IsMEJBQUtBLE9BQUwsRUFBYyxnQkFBa0I7QUFBQSxjQUFmTCxRQUFlLFFBQWZBLFFBQWU7QUFDOUJBLFVBQUFBLFFBQVEsQ0FBQ2UsUUFBVDtBQUNELFNBRkQ7QUFHRCxPQUpEO0FBS0EsYUFBTyxJQUFQO0FBQ0Q7Ozs0QkFFYTtBQUNaLFdBQUs5QixJQUFMLEdBQVk7QUFDVkMsUUFBQUEsT0FBTyxFQUFFLEVBREM7QUFFVkMsUUFBQUEsS0FBSyxFQUFFLEVBRkc7QUFHVkMsUUFBQUEsU0FBUyxFQUFFO0FBSEQsT0FBWjtBQU1BLGFBQU8sSUFBUDtBQUNEOzs7d0JBUUdDLEksRUFBcUJDLEksRUFBMEM7QUFDakUsVUFBTTBCLGFBQWEsR0FBRzNCLElBQUksSUFBSSxJQUFSLEdBQWUsQ0FBQyxLQUFLSixJQUFMLENBQVVJLElBQVYsQ0FBRCxDQUFmLEdBQW1DLHNCQUFTLEtBQUtKLElBQWQsQ0FBekQ7QUFDQSxVQUFNc0IsTUFBTSxHQUFHUyxhQUFhLENBQUNDLElBQWQsQ0FBbUIsVUFBQUMsQ0FBQztBQUFBLGVBQUksaUJBQUlBLENBQUosRUFBTzVCLElBQVAsQ0FBSjtBQUFBLE9BQXBCLENBQWY7QUFFQSxhQUFPaUIsTUFBTSxJQUFJLElBQVYsR0FBaUJBLE1BQU0sQ0FBQ2pCLElBQUQsQ0FBTixDQUFhVSxRQUE5QixHQUF5Q21CLFNBQWhEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlYWNoLCBoYXMsIHJlZHVjZSwgdmFsdWVzSW4gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQ29sbGVjdG9yIH0gZnJvbSAnLi9jb2xsZWN0b3InO1xuaW1wb3J0IHsgQ291bnRlciB9IGZyb20gJy4vY291bnRlcic7XG5pbXBvcnQgeyBHYXVnZSB9IGZyb20gJy4vZ2F1Z2UnO1xuaW1wb3J0IHsgSGlzdG9ncmFtIH0gZnJvbSAnLi9oaXN0b2dyYW0nO1xuaW1wb3J0IHsgQ29sbGVjdG9yVHlwZSwgQ291bnRlclZhbHVlLCBIaXN0b2dyYW1WYWx1ZSwgTWV0cmljIH0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7IGZvcm1hdENvdW50ZXJPckdhdWdlLCBmb3JtYXRIaXN0b2dyYW1PclN1bW1hcnkgfSBmcm9tICcuL3V0aWxzJztcblxudHlwZSBDb2xsZWN0b3JGb3JUeXBlPFQgZXh0ZW5kcyBDb2xsZWN0b3JUeXBlPiA9XG4gIFQgZXh0ZW5kcyAnaGlzdG9ncmFtJyA/IEhpc3RvZ3JhbSA6XG4gICAgVCBleHRlbmRzICdnYXVnZScgPyBHYXVnZSA6XG4gICAgICBUIGV4dGVuZHMgJ2NvdW50ZXInID8gQ291bnRlciA6XG4gICAgICAgIG5ldmVyO1xuXG5pbnRlcmZhY2UgUmVnaXN0cnlJdGVtPFQgZXh0ZW5kcyBDb2xsZWN0b3JUeXBlPiB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICB0eXBlOiBUO1xuICAgIGhlbHA6IHN0cmluZztcbiAgICBpbnN0YW5jZTogQ29sbGVjdG9yRm9yVHlwZTxUPjtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlZ2lzdHJ5IHtcbiAgcHJpdmF0ZSBkYXRhOiB7XG4gICAgW0sgaW4gQ29sbGVjdG9yVHlwZV06IFJlZ2lzdHJ5SXRlbTxLPlxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGF0YSA9IHtcbiAgICAgIGNvdW50ZXI6IHt9LFxuICAgICAgZ2F1Z2U6IHt9LFxuICAgICAgaGlzdG9ncmFtOiB7fVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlSW5wdXQoXG4gICAgdHlwZTogQ29sbGVjdG9yVHlwZSxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgaGVscD86IHN0cmluZyxcbiAgICBidWNrZXRzPzogbnVtYmVyW10sXG4gICk6IHZvaWQge1xuICAgIC8vIGNoZWNrcyBmb3IganMgcnVudGltZVxuICAgIGlmIChTdHJpbmcobmFtZSkgPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldHJpYyBuYW1lIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH1cbiAgICBpZiAoWydjb3VudGVyJywgJ2dhdWdlJywgJ2hpc3RvZ3JhbSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbWV0cmljIHR5cGUgJHt0eXBlfWApO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaGVscCAhPT0gJ3N0cmluZycgJiYgaGVscCAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlbHAgbXVzdCBiZSBzdHJpbmcgb3IgdW5kZWZpbmVkL251bGwnKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzKHRoaXMuZGF0YSwgYCR7dHlwZX0uJHtuYW1lfWApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgbWV0cmljIHdpdGggdGhlIG5hbWUgJyR7bmFtZX0nIGFscmVhZHkgZXhpc3RzIGZvciB0eXBlICcke3R5cGV9J2ApO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShidWNrZXRzKSAmJiBidWNrZXRzICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYnVja2V0cyBtdXN0IGJlIGFycmF5IG9yIHVuZGVmaW5lZC9udWxsJyk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlKHR5cGU6ICdjb3VudGVyJywgbmFtZTogc3RyaW5nLCBoZWxwPzogc3RyaW5nKTogQ291bnRlcjtcblxuICBjcmVhdGUodHlwZTogJ2dhdWdlJywgbmFtZTogc3RyaW5nLCBoZWxwPzogc3RyaW5nKTogR2F1Z2U7XG5cbiAgY3JlYXRlKHR5cGU6ICdoaXN0b2dyYW0nLCBuYW1lOiBzdHJpbmcsIGhlbHA/OiBzdHJpbmcsIGhpc3RvZ3JhbUJ1Y2tldHM/OiBudW1iZXJbXSk6IEhpc3RvZ3JhbTtcblxuICBjcmVhdGUoXG4gICAgdHlwZTogQ29sbGVjdG9yVHlwZSxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgaGVscDogc3RyaW5nID0gJycsXG4gICAgaGlzdG9ncmFtQnVja2V0czogbnVtYmVyW10gPSBbXSxcbiAgKTogQ29sbGVjdG9yPGFueT4ge1xuICAgIHRoaXMudmFsaWRhdGVJbnB1dCh0eXBlLCBuYW1lLCBoZWxwLCBoaXN0b2dyYW1CdWNrZXRzKTtcblxuICAgIGxldCBpbnN0YW5jZTtcbiAgICBpZiAodHlwZSA9PT0gJ2NvdW50ZXInKSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBDb3VudGVyKCk7XG4gICAgICB0aGlzLmRhdGEuY291bnRlcltuYW1lXSA9IHsgaGVscCwgaW5zdGFuY2UsIHR5cGUgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdnYXVnZScpIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IEdhdWdlKCk7XG4gICAgICB0aGlzLmRhdGEuZ2F1Z2VbbmFtZV0gPSB7IGhlbHAsIGluc3RhbmNlLCB0eXBlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IEhpc3RvZ3JhbShoaXN0b2dyYW1CdWNrZXRzKTtcbiAgICAgIHRoaXMuZGF0YS5oaXN0b2dyYW1bbmFtZV0gPSB7IGhlbHAsIGluc3RhbmNlLCB0eXBlIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgaW4gdGhlIHByb21ldGhldXMnIGRlc2lyZWQgZm9ybWF0XG4gICAqIE1vcmUgaW5mbzogaHR0cHM6Ly9wcm9tZXRoZXVzLmlvL2RvY3MvY29uY2VwdHMvZGF0YV9tb2RlbC9cbiAgICogTG9vcCB0aHJvdWdoIGVhY2ggbWV0cmljIHR5cGUgKGNvdW50ZXIsIGhpc3RvZ3JhbSwgZXRjKTtcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgbWV0cmljcygpOiBzdHJpbmcge1xuICAgIHJldHVybiByZWR1Y2UodGhpcy5kYXRhLFxuICAgICAgKG91dHB1dCwgbWV0cmljcywgdHlwZSkgPT4gb3V0cHV0ICsgcmVkdWNlKG1ldHJpY3MsIChzcmMsIG1ldHJpYywgbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBtZXRyaWMuaW5zdGFuY2UuY29sbGVjdCgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3JjO1xuICAgICAgICBpZiAobWV0cmljLmhlbHAubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlc3VsdCArPSBgIyBIRUxQICR7bmFtZX0gJHttZXRyaWMuaGVscH1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBgIyBUWVBFICR7bmFtZX0gJHt0eXBlfVxcbmA7XG4gICAgICAgIC8vIEVhY2ggbWV0cmljIGNhbiBoYXZlIG1hbnkgbGFiZWxzLiBJdGVyYXRlIG92ZXIgZWFjaCBhbmQgYXBwZW5kIHRvIHRoZSBzdHJpbmcuXG4gICAgICAgIHJlc3VsdCArPSByZWR1Y2UodmFsdWVzLCAoc3RyLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IHR5cGUgPT09ICdoaXN0b2dyYW0nXG4gICAgICAgICAgICA/IGZvcm1hdEhpc3RvZ3JhbU9yU3VtbWFyeShuYW1lLCB2YWx1ZSBhcyBNZXRyaWM8SGlzdG9ncmFtVmFsdWU+KVxuICAgICAgICAgICAgOiBmb3JtYXRDb3VudGVyT3JHYXVnZShuYW1lLCB2YWx1ZSBhcyBNZXRyaWM8Q291bnRlclZhbHVlPik7XG4gICAgICAgICAgcmV0dXJuIHN0ciArIGZvcm1hdHRlZDtcbiAgICAgICAgfSwgJycpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwgJycpLFxuICAgICAgJycpO1xuICB9XG5cbiAgcmVzZXQoKTogdGhpcyB7XG4gICAgZWFjaCh0aGlzLmRhdGEsIChtZXRyaWNzKSA9PiB7XG4gICAgICBlYWNoKG1ldHJpY3MsICh7IGluc3RhbmNlIH0pID0+IHtcbiAgICAgICAgaW5zdGFuY2UucmVzZXRBbGwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xlYXIoKTogdGhpcyB7XG4gICAgdGhpcy5kYXRhID0ge1xuICAgICAgY291bnRlcjoge30sXG4gICAgICBnYXVnZToge30sXG4gICAgICBoaXN0b2dyYW06IHt9LFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCh0eXBlOiAnY291bnRlcicsIG5hbWU6IHN0cmluZyk6IENvdW50ZXIgfCB1bmRlZmluZWQ7XG5cbiAgZ2V0KHR5cGU6ICdnYXVnZScsIG5hbWU6IHN0cmluZyk6IEdhdWdlIHwgdW5kZWZpbmVkO1xuXG4gIGdldCh0eXBlOiAnaGlzdG9ncmFtJywgbmFtZTogc3RyaW5nKTogSGlzdG9ncmFtIHwgdW5kZWZpbmVkO1xuXG4gIGdldCh0eXBlOiBDb2xsZWN0b3JUeXBlLCBuYW1lOiBzdHJpbmcpOiBDb2xsZWN0b3I8YW55PiB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgcmVnaXN0cnlJdGVtcyA9IHR5cGUgIT0gbnVsbCA/IFt0aGlzLmRhdGFbdHlwZV1dIDogdmFsdWVzSW4odGhpcy5kYXRhKTtcbiAgICBjb25zdCBtZXRyaWMgPSByZWdpc3RyeUl0ZW1zLmZpbmQodiA9PiBoYXModiwgbmFtZSkpO1xuXG4gICAgcmV0dXJuIG1ldHJpYyAhPSBudWxsID8gbWV0cmljW25hbWVdLmluc3RhbmNlIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=