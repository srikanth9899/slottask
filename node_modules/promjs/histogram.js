"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Histogram = void 0;

var _lodash = require("lodash");

var _collector = require("./collector");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function findMinBucketIndex(ary, num) {
  if (num < ary[ary.length - 1]) {
    for (var i = 0; i < ary.length; i += 1) {
      if (num <= ary[i]) {
        return i;
      }
    }
  }

  return undefined;
}

function getInitialValue(buckets) {
  // Make the skeleton to which values will be saved.
  var entries = (0, _lodash.reduce)(buckets, function (result, b) {
    result[b.toString()] = 0;
    return result;
  }, {
    '+Inf': 0
  });
  return {
    entries: entries,
    sum: 0,
    count: 0,
    raw: []
  };
}

var Histogram =
/*#__PURE__*/
function (_Collector) {
  _inherits(Histogram, _Collector);

  function Histogram() {
    var _this;

    var buckets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, Histogram);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Histogram).call(this)); // Sort to get smallest -> largest in order.

    _defineProperty(_assertThisInitialized(_this), "buckets", void 0);

    _this.buckets = buckets.sort(function (a, b) {
      return a > b ? 1 : -1;
    });

    _this.set(getInitialValue(_this.buckets));

    _this.observe = _this.observe.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Histogram, [{
    key: "observe",
    value: function observe(value, labels) {
      var metric = this.get(labels);

      if (metric == null) {
        // Create a metric for the labels.
        metric = this.set(getInitialValue(this.buckets), labels).get(labels);
      }

      metric.value.raw.push(value);
      metric.value.entries['+Inf'] += 1;
      var minBucketIndex = findMinBucketIndex(this.buckets, value);

      if (minBucketIndex != null) {
        for (var i = minBucketIndex; i < this.buckets.length; i += 1) {
          var val = metric.value.entries[this.buckets[i].toString()];
          metric.value.entries[this.buckets[i].toString()] = val + 1;
        }
      }

      metric.value.sum = (0, _lodash.sum)(metric.value.raw);
      metric.value.count += 1;
      return this;
    }
  }, {
    key: "reset",
    value: function reset(labels) {
      this.set(getInitialValue(this.buckets), labels);
    }
  }]);

  return Histogram;
}(_collector.Collector);

exports.Histogram = Histogram;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oaXN0b2dyYW0udHMiXSwibmFtZXMiOlsiZmluZE1pbkJ1Y2tldEluZGV4IiwiYXJ5IiwibnVtIiwibGVuZ3RoIiwiaSIsInVuZGVmaW5lZCIsImdldEluaXRpYWxWYWx1ZSIsImJ1Y2tldHMiLCJlbnRyaWVzIiwicmVzdWx0IiwiYiIsInRvU3RyaW5nIiwic3VtIiwiY291bnQiLCJyYXciLCJIaXN0b2dyYW0iLCJzb3J0IiwiYSIsInNldCIsIm9ic2VydmUiLCJiaW5kIiwidmFsdWUiLCJsYWJlbHMiLCJtZXRyaWMiLCJnZXQiLCJwdXNoIiwibWluQnVja2V0SW5kZXgiLCJ2YWwiLCJDb2xsZWN0b3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLFNBQVNBLGtCQUFULENBQTRCQyxHQUE1QixFQUEyQ0MsR0FBM0MsRUFBNEU7QUFDMUUsTUFBSUEsR0FBRyxHQUFHRCxHQUFHLENBQUNBLEdBQUcsQ0FBQ0UsTUFBSixHQUFhLENBQWQsQ0FBYixFQUErQjtBQUM3QixTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILEdBQUcsQ0FBQ0UsTUFBeEIsRUFBZ0NDLENBQUMsSUFBSSxDQUFyQyxFQUF3QztBQUN0QyxVQUFJRixHQUFHLElBQUlELEdBQUcsQ0FBQ0csQ0FBRCxDQUFkLEVBQW1CO0FBQ2pCLGVBQU9BLENBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBT0MsU0FBUDtBQUNEOztBQUVELFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQTREO0FBQzFEO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLG9CQUFPRCxPQUFQLEVBQWdCLFVBQUNFLE1BQUQsRUFBU0MsQ0FBVCxFQUFlO0FBQzdDRCxJQUFBQSxNQUFNLENBQUNDLENBQUMsQ0FBQ0MsUUFBRixFQUFELENBQU4sR0FBdUIsQ0FBdkI7QUFDQSxXQUFPRixNQUFQO0FBQ0QsR0FIZSxFQUdiO0FBQUUsWUFBUTtBQUFWLEdBSGEsQ0FBaEI7QUFLQSxTQUFPO0FBQ0xELElBQUFBLE9BQU8sRUFBUEEsT0FESztBQUVMSSxJQUFBQSxHQUFHLEVBQUUsQ0FGQTtBQUdMQyxJQUFBQSxLQUFLLEVBQUUsQ0FIRjtBQUlMQyxJQUFBQSxHQUFHLEVBQUU7QUFKQSxHQUFQO0FBTUQ7O0lBRVlDLFM7Ozs7O0FBR1gsdUJBQW9DO0FBQUE7O0FBQUEsUUFBeEJSLE9BQXdCLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ2xDLG9GQURrQyxDQUVsQzs7QUFGa0M7O0FBR2xDLFVBQUtBLE9BQUwsR0FBZUEsT0FBTyxDQUFDUyxJQUFSLENBQWEsVUFBQ0MsQ0FBRCxFQUFJUCxDQUFKO0FBQUEsYUFBV08sQ0FBQyxHQUFHUCxDQUFKLEdBQVEsQ0FBUixHQUFZLENBQUMsQ0FBeEI7QUFBQSxLQUFiLENBQWY7O0FBQ0EsVUFBS1EsR0FBTCxDQUFTWixlQUFlLENBQUMsTUFBS0MsT0FBTixDQUF4Qjs7QUFDQSxVQUFLWSxPQUFMLEdBQWUsTUFBS0EsT0FBTCxDQUFhQyxJQUFiLCtCQUFmO0FBTGtDO0FBTW5DOzs7OzRCQUVPQyxLLEVBQWVDLE0sRUFBdUI7QUFDNUMsVUFBSUMsTUFBTSxHQUFHLEtBQUtDLEdBQUwsQ0FBU0YsTUFBVCxDQUFiOztBQUNBLFVBQUlDLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2xCO0FBQ0FBLFFBQUFBLE1BQU0sR0FBRyxLQUFLTCxHQUFMLENBQVNaLGVBQWUsQ0FBQyxLQUFLQyxPQUFOLENBQXhCLEVBQXdDZSxNQUF4QyxFQUFnREUsR0FBaEQsQ0FBb0RGLE1BQXBELENBQVQ7QUFDRDs7QUFFREMsTUFBQUEsTUFBTSxDQUFDRixLQUFQLENBQWFQLEdBQWIsQ0FBaUJXLElBQWpCLENBQXNCSixLQUF0QjtBQUNBRSxNQUFBQSxNQUFNLENBQUNGLEtBQVAsQ0FBYWIsT0FBYixDQUFxQixNQUFyQixLQUFnQyxDQUFoQztBQUVBLFVBQU1rQixjQUFjLEdBQUcxQixrQkFBa0IsQ0FBQyxLQUFLTyxPQUFOLEVBQWVjLEtBQWYsQ0FBekM7O0FBRUEsVUFBSUssY0FBYyxJQUFJLElBQXRCLEVBQTRCO0FBQzFCLGFBQUssSUFBSXRCLENBQUMsR0FBR3NCLGNBQWIsRUFBNkJ0QixDQUFDLEdBQUcsS0FBS0csT0FBTCxDQUFhSixNQUE5QyxFQUFzREMsQ0FBQyxJQUFJLENBQTNELEVBQThEO0FBQzVELGNBQU11QixHQUFHLEdBQUdKLE1BQU0sQ0FBQ0YsS0FBUCxDQUFhYixPQUFiLENBQXFCLEtBQUtELE9BQUwsQ0FBYUgsQ0FBYixFQUFnQk8sUUFBaEIsRUFBckIsQ0FBWjtBQUNBWSxVQUFBQSxNQUFNLENBQUNGLEtBQVAsQ0FBYWIsT0FBYixDQUFxQixLQUFLRCxPQUFMLENBQWFILENBQWIsRUFBZ0JPLFFBQWhCLEVBQXJCLElBQW1EZ0IsR0FBRyxHQUFHLENBQXpEO0FBQ0Q7QUFDRjs7QUFFREosTUFBQUEsTUFBTSxDQUFDRixLQUFQLENBQWFULEdBQWIsR0FBbUIsaUJBQUlXLE1BQU0sQ0FBQ0YsS0FBUCxDQUFhUCxHQUFqQixDQUFuQjtBQUNBUyxNQUFBQSxNQUFNLENBQUNGLEtBQVAsQ0FBYVIsS0FBYixJQUFzQixDQUF0QjtBQUVBLGFBQU8sSUFBUDtBQUNEOzs7MEJBRUtTLE0sRUFBdUI7QUFDM0IsV0FBS0osR0FBTCxDQUFTWixlQUFlLENBQUMsS0FBS0MsT0FBTixDQUF4QixFQUF3Q2UsTUFBeEM7QUFDRDs7OztFQXRDNEJNLG9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVkdWNlLCBzdW0gfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBDb2xsZWN0b3IgfSBmcm9tICcuL2NvbGxlY3Rvcic7XG5pbXBvcnQgeyBIaXN0b2dyYW1WYWx1ZSwgSGlzdG9ncmFtVmFsdWVFbnRyaWVzLCBMYWJlbHMgfSBmcm9tICcuL3R5cGVzJztcblxuZnVuY3Rpb24gZmluZE1pbkJ1Y2tldEluZGV4KGFyeTogbnVtYmVyW10sIG51bTogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgaWYgKG51bSA8IGFyeVthcnkubGVuZ3RoIC0gMV0pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKG51bSA8PSBhcnlbaV0pIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbFZhbHVlKGJ1Y2tldHM6IG51bWJlcltdKTogSGlzdG9ncmFtVmFsdWUge1xuICAvLyBNYWtlIHRoZSBza2VsZXRvbiB0byB3aGljaCB2YWx1ZXMgd2lsbCBiZSBzYXZlZC5cbiAgY29uc3QgZW50cmllcyA9IHJlZHVjZShidWNrZXRzLCAocmVzdWx0LCBiKSA9PiB7XG4gICAgcmVzdWx0W2IudG9TdHJpbmcoKV0gPSAwO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHsgJytJbmYnOiAwIH0gYXMgSGlzdG9ncmFtVmFsdWVFbnRyaWVzKTtcblxuICByZXR1cm4ge1xuICAgIGVudHJpZXMsXG4gICAgc3VtOiAwLFxuICAgIGNvdW50OiAwLFxuICAgIHJhdzogW10sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBIaXN0b2dyYW0gZXh0ZW5kcyBDb2xsZWN0b3I8SGlzdG9ncmFtVmFsdWU+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBidWNrZXRzOiBudW1iZXJbXTtcblxuICBjb25zdHJ1Y3RvcihidWNrZXRzOiBudW1iZXJbXSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBTb3J0IHRvIGdldCBzbWFsbGVzdCAtPiBsYXJnZXN0IGluIG9yZGVyLlxuICAgIHRoaXMuYnVja2V0cyA9IGJ1Y2tldHMuc29ydCgoYSwgYikgPT4gKGEgPiBiID8gMSA6IC0xKSk7XG4gICAgdGhpcy5zZXQoZ2V0SW5pdGlhbFZhbHVlKHRoaXMuYnVja2V0cykpO1xuICAgIHRoaXMub2JzZXJ2ZSA9IHRoaXMub2JzZXJ2ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb2JzZXJ2ZSh2YWx1ZTogbnVtYmVyLCBsYWJlbHM/OiBMYWJlbHMpOiB0aGlzIHtcbiAgICBsZXQgbWV0cmljID0gdGhpcy5nZXQobGFiZWxzKTtcbiAgICBpZiAobWV0cmljID09IG51bGwpIHtcbiAgICAgIC8vIENyZWF0ZSBhIG1ldHJpYyBmb3IgdGhlIGxhYmVscy5cbiAgICAgIG1ldHJpYyA9IHRoaXMuc2V0KGdldEluaXRpYWxWYWx1ZSh0aGlzLmJ1Y2tldHMpLCBsYWJlbHMpLmdldChsYWJlbHMpITtcbiAgICB9XG5cbiAgICBtZXRyaWMudmFsdWUucmF3LnB1c2godmFsdWUpO1xuICAgIG1ldHJpYy52YWx1ZS5lbnRyaWVzWycrSW5mJ10gKz0gMTtcblxuICAgIGNvbnN0IG1pbkJ1Y2tldEluZGV4ID0gZmluZE1pbkJ1Y2tldEluZGV4KHRoaXMuYnVja2V0cywgdmFsdWUpO1xuXG4gICAgaWYgKG1pbkJ1Y2tldEluZGV4ICE9IG51bGwpIHtcbiAgICAgIGZvciAobGV0IGkgPSBtaW5CdWNrZXRJbmRleDsgaSA8IHRoaXMuYnVja2V0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCB2YWwgPSBtZXRyaWMudmFsdWUuZW50cmllc1t0aGlzLmJ1Y2tldHNbaV0udG9TdHJpbmcoKV07XG4gICAgICAgIG1ldHJpYy52YWx1ZS5lbnRyaWVzW3RoaXMuYnVja2V0c1tpXS50b1N0cmluZygpXSA9IHZhbCArIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWV0cmljLnZhbHVlLnN1bSA9IHN1bShtZXRyaWMudmFsdWUucmF3KTtcbiAgICBtZXRyaWMudmFsdWUuY291bnQgKz0gMTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVzZXQobGFiZWxzPzogTGFiZWxzKTogdm9pZCB7XG4gICAgdGhpcy5zZXQoZ2V0SW5pdGlhbFZhbHVlKHRoaXMuYnVja2V0cyksIGxhYmVscyk7XG4gIH1cbn1cbiJdfQ==