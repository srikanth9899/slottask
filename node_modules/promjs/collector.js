"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collector = void 0;

var _lodash = require("lodash");

var _utils = require("./utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Collector =
/*#__PURE__*/
function () {
  function Collector() {
    _classCallCheck(this, Collector);

    _defineProperty(this, "data", void 0);

    this.data = [];
  }

  _createClass(Collector, [{
    key: "get",
    value: function get(labels) {
      return (0, _utils.findExistingMetric)(labels, this.data);
    }
  }, {
    key: "set",
    value: function set(value, labels) {
      var existing = (0, _utils.findExistingMetric)(labels, this.data);

      if (existing) {
        existing.value = value;
      } else {
        this.data.push({
          labels: labels,
          value: value
        });
      }

      return this;
    }
  }, {
    key: "collect",
    value: function collect(labels) {
      return (0, _lodash.filter)(this.data, function (item) {
        return (0, _lodash.matches)(labels)(item.labels);
      });
    }
  }, {
    key: "resetAll",
    value: function resetAll() {
      var _this = this;

      (0, _lodash.each)(this.data, function (d) {
        _this.reset(d.labels);
      });
      return this;
    }
  }]);

  return Collector;
}();

exports.Collector = Collector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xsZWN0b3IudHMiXSwibmFtZXMiOlsiQ29sbGVjdG9yIiwiZGF0YSIsImxhYmVscyIsInZhbHVlIiwiZXhpc3RpbmciLCJwdXNoIiwiaXRlbSIsImQiLCJyZXNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7O0lBRXNCQSxTOzs7QUFHcEIsdUJBQWM7QUFBQTs7QUFBQTs7QUFDWixTQUFLQyxJQUFMLEdBQVksRUFBWjtBQUNEOzs7O3dCQUVHQyxNLEVBQXdDO0FBQzFDLGFBQU8sK0JBQXNCQSxNQUF0QixFQUE4QixLQUFLRCxJQUFuQyxDQUFQO0FBQ0Q7Ozt3QkFFR0UsSyxFQUFVRCxNLEVBQXVCO0FBQ25DLFVBQU1FLFFBQVEsR0FBRywrQkFBbUJGLE1BQW5CLEVBQTJCLEtBQUtELElBQWhDLENBQWpCOztBQUNBLFVBQUlHLFFBQUosRUFBYztBQUNaQSxRQUFBQSxRQUFRLENBQUNELEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS0YsSUFBTCxDQUFVSSxJQUFWLENBQWU7QUFDYkgsVUFBQUEsTUFBTSxFQUFOQSxNQURhO0FBRWJDLFVBQUFBLEtBQUssRUFBTEE7QUFGYSxTQUFmO0FBSUQ7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7Ozs0QkFFT0QsTSxFQUE4QjtBQUNwQyxhQUFPLG9CQUFPLEtBQUtELElBQVosRUFBa0IsVUFBQUssSUFBSTtBQUFBLGVBQUkscUJBQVFKLE1BQVIsRUFBZ0JJLElBQUksQ0FBQ0osTUFBckIsQ0FBSjtBQUFBLE9BQXRCLENBQVA7QUFDRDs7OytCQUVnQjtBQUFBOztBQUNmLHdCQUFLLEtBQUtELElBQVYsRUFBZ0IsVUFBQ00sQ0FBRCxFQUFPO0FBQ3JCLFFBQUEsS0FBSSxDQUFDQyxLQUFMLENBQVdELENBQUMsQ0FBQ0wsTUFBYjtBQUNELE9BRkQ7QUFJQSxhQUFPLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbHRlciwgbWF0Y2hlcywgZWFjaCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBMYWJlbHMsIE1ldHJpYywgTWV0cmljVmFsdWUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGZpbmRFeGlzdGluZ01ldHJpYyB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29sbGVjdG9yPFQgZXh0ZW5kcyBNZXRyaWNWYWx1ZT4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGE6IE1ldHJpYzxUPltdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG5cbiAgZ2V0KGxhYmVscz86IExhYmVscyk6IE1ldHJpYzxUPiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGZpbmRFeGlzdGluZ01ldHJpYzxUPihsYWJlbHMsIHRoaXMuZGF0YSk7XG4gIH1cblxuICBzZXQodmFsdWU6IFQsIGxhYmVscz86IExhYmVscyk6IHRoaXMge1xuICAgIGNvbnN0IGV4aXN0aW5nID0gZmluZEV4aXN0aW5nTWV0cmljKGxhYmVscywgdGhpcy5kYXRhKTtcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGV4aXN0aW5nLnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKHtcbiAgICAgICAgbGFiZWxzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29sbGVjdChsYWJlbHM/OiBMYWJlbHMpOiBNZXRyaWM8VD5bXSB7XG4gICAgcmV0dXJuIGZpbHRlcih0aGlzLmRhdGEsIGl0ZW0gPT4gbWF0Y2hlcyhsYWJlbHMpKGl0ZW0ubGFiZWxzKSk7XG4gIH1cblxuICByZXNldEFsbCgpOiB0aGlzIHtcbiAgICBlYWNoKHRoaXMuZGF0YSwgKGQpID0+IHtcbiAgICAgIHRoaXMucmVzZXQoZC5sYWJlbHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhYnN0cmFjdCByZXNldChsYWJlbHM/OiBMYWJlbHMpOiB2b2lkO1xufVxuIl19